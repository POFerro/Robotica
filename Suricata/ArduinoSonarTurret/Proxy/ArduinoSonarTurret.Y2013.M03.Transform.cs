//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("ArduinoSonarTurret")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("ArduinoSonarTurret")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="ArduinoSonarTurret.Y2013.M03, Version=1.0.0.0, Culture=neutral, PublicKeyToken=e3" +
    "a6d1d8ea7297f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformArduinoSonarTurret {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_ArduinoSonarTurret_Proxy_RangeSweepRequest_TO_POFerro_Robotics_ArduinoSonarTurret_RangeSweepRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::POFerro.Robotics.ArduinoSonarTurret.RangeSweepRequest), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_ArduinoSonarTurret_RangeSweepRequest_TO_POFerro_Robotics_ArduinoSonarTurret_Proxy_RangeSweepRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_ArduinoSonarTurret_Proxy_ArduinoSonarTurretState_TO_POFerro_Robotics_ArduinoSonarTurret_ArduinoSonarTurretState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::POFerro.Robotics.ArduinoSonarTurret.ArduinoSonarTurretState), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_ArduinoSonarTurret_ArduinoSonarTurretState_TO_POFerro_Robotics_ArduinoSonarTurret_Proxy_ArduinoSonarTurretState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_ArduinoSonarTurret_Proxy_RangePositionRead_TO_POFerro_Robotics_ArduinoSonarTurret_RangePositionRead));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::POFerro.Robotics.ArduinoSonarTurret.RangePositionRead), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_ArduinoSonarTurret_RangePositionRead_TO_POFerro_Robotics_ArduinoSonarTurret_Proxy_RangePositionRead));
        }
        
        private static global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest _cachedInstance0 = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest();
        
        private static global::POFerro.Robotics.ArduinoSonarTurret.RangeSweepRequest _cachedInstance = new global::POFerro.Robotics.ArduinoSonarTurret.RangeSweepRequest();
        
        public static object POFerro_Robotics_ArduinoSonarTurret_Proxy_RangeSweepRequest_TO_POFerro_Robotics_ArduinoSonarTurret_RangeSweepRequest(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object POFerro_Robotics_ArduinoSonarTurret_RangeSweepRequest_TO_POFerro_Robotics_ArduinoSonarTurret_Proxy_RangeSweepRequest(object transformFrom) {
            return _cachedInstance0;
        }
        
        public static object POFerro_Robotics_ArduinoSonarTurret_Proxy_ArduinoSonarTurretState_TO_POFerro_Robotics_ArduinoSonarTurret_ArduinoSonarTurretState(object transformFrom) {
            global::POFerro.Robotics.ArduinoSonarTurret.ArduinoSonarTurretState target = new global::POFerro.Robotics.ArduinoSonarTurret.ArduinoSonarTurretState();
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState from = ((global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState)(transformFrom));
            target.AngularRange = from.AngularRange;
            target.AngularResolution = from.AngularResolution;
            target.DistanceMeasurement = from.DistanceMeasurement;
            if ((from.DistanceMeasurements != null)) {
                int count = from.DistanceMeasurements.Length;
                double[] tmp = new double[count];
                global::System.Buffer.BlockCopy(from.DistanceMeasurements, 0, tmp, 0, global::System.Buffer.ByteLength(from.DistanceMeasurements));
                target.DistanceMeasurements = tmp;
            }
            else {
                target.DistanceMeasurements = null;
            }
            target.MaxDistance = from.MaxDistance;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object POFerro_Robotics_ArduinoSonarTurret_ArduinoSonarTurretState_TO_POFerro_Robotics_ArduinoSonarTurret_Proxy_ArduinoSonarTurretState(object transformFrom) {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState target = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState();
            global::POFerro.Robotics.ArduinoSonarTurret.ArduinoSonarTurretState from = ((global::POFerro.Robotics.ArduinoSonarTurret.ArduinoSonarTurretState)(transformFrom));
            target.AngularRange = from.AngularRange;
            target.AngularResolution = from.AngularResolution;
            target.DistanceMeasurement = from.DistanceMeasurement;
            double[] tmp = from.DistanceMeasurements;
            if ((tmp != null)) {
                int count = tmp.Length;
                double[] tmp0 = new double[count];
                global::System.Buffer.BlockCopy(tmp, 0, tmp0, 0, global::System.Buffer.ByteLength(tmp));
                target.DistanceMeasurements = tmp0;
            }
            target.MaxDistance = from.MaxDistance;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object POFerro_Robotics_ArduinoSonarTurret_Proxy_RangePositionRead_TO_POFerro_Robotics_ArduinoSonarTurret_RangePositionRead(object transformFrom) {
            global::POFerro.Robotics.ArduinoSonarTurret.RangePositionRead target = new global::POFerro.Robotics.ArduinoSonarTurret.RangePositionRead();
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead from = ((global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead)(transformFrom));
            target.SweepAngularStep = from.SweepAngularStep;
            target.CurrentAngle = from.CurrentAngle;
            target.DistanceMeasurement = from.DistanceMeasurement;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.MaxDistance = from.MaxDistance;
            target.Pose = from.Pose;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object POFerro_Robotics_ArduinoSonarTurret_RangePositionRead_TO_POFerro_Robotics_ArduinoSonarTurret_Proxy_RangePositionRead(object transformFrom) {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead target = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead();
            global::POFerro.Robotics.ArduinoSonarTurret.RangePositionRead from = ((global::POFerro.Robotics.ArduinoSonarTurret.RangePositionRead)(transformFrom));
            target.SweepAngularStep = from.SweepAngularStep;
            target.CurrentAngle = from.CurrentAngle;
            target.DistanceMeasurement = from.DistanceMeasurement;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.MaxDistance = from.MaxDistance;
            target.Pose = from.Pose;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
    }
}
