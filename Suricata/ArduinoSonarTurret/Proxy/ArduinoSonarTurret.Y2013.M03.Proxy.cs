//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("ArduinoSonarTurret")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("ArduinoSonarTurret")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="ArduinoSonarTurret.Y2013.M03, Version=1.0.0.0, Culture=neutral, PublicKeyToken=e3" +
    "a6d1d8ea7297f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace POFerro.Robotics.ArduinoSonarTurret.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.pferro/2013/03/arduinosonarturret.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.pferro/2013/03/arduinosonarturret.html", ElementName="RangeSweepRequest")]
    public class RangeSweepRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RangeSweepRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current RangeSweepRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest typedTarget = ((global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest)(target));
        }
        
        /// <summary>
        ///Clones RangeSweepRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest target0 = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RangeSweepRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes RangeSweepRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RangeSweepRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.pferro/2013/03/arduinosonarturret.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.pferro/2013/03/arduinosonarturret.html", ElementName="ArduinoSonarTurretState")]
    public class ArduinoSonarTurretState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ArduinoSonarTurretState() {
        }
        
        private double _AngularRange;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the sonar\'s scanning angle.")]
        public double AngularRange {
            get {
                return this._AngularRange;
            }
            set {
                this._AngularRange = value;
            }
        }
        
        private double _AngularResolution;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the size of smallest detectable feature (in radians).")]
        public double AngularResolution {
            get {
                return this._AngularResolution;
            }
            set {
                this._AngularResolution = value;
            }
        }
        
        private double _DistanceMeasurement;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the distance reading of the sonar in meters.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double DistanceMeasurement {
            get {
                return this._DistanceMeasurement;
            }
            set {
                this._DistanceMeasurement = value;
            }
        }
        
        private double[] _DistanceMeasurements;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the set of distance readings.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double[] DistanceMeasurements {
            get {
                return this._DistanceMeasurements;
            }
            set {
                this._DistanceMeasurements = value;
            }
        }
        
        private double _MaxDistance;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the maximum distance the sensor can read in meters.")]
        public double MaxDistance {
            get {
                return this._MaxDistance;
            }
            set {
                this._MaxDistance = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlOmitDefaultValue=true)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the timestamp for the reading of the sonar sensor.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.ComponentModel.DefaultValueAttribute(typeof(global::System.DateTime), "0001-01-01T00:00:00")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ArduinoSonarTurretState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState typedTarget = ((global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState)(target));
            typedTarget._AngularRange = this._AngularRange;
            typedTarget._AngularResolution = this._AngularResolution;
            typedTarget._DistanceMeasurement = this._DistanceMeasurement;
            if ((this._DistanceMeasurements != null)) {
                int count = this._DistanceMeasurements.Length;
                double[] tmp = new double[count];
                global::System.Buffer.BlockCopy(this._DistanceMeasurements, 0, tmp, 0, global::System.Buffer.ByteLength(this._DistanceMeasurements));
                typedTarget._DistanceMeasurements = tmp;
            }
            typedTarget._MaxDistance = this._MaxDistance;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones ArduinoSonarTurretState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState target0 = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ArduinoSonarTurretState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._AngularRange);
            writer.Write(this._AngularResolution);
            writer.Write(this._DistanceMeasurement);
            if ((this._DistanceMeasurements == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._DistanceMeasurements.Length);
                for (int indexDistanceMeasurements = 0; (indexDistanceMeasurements < this._DistanceMeasurements.Length); indexDistanceMeasurements = (indexDistanceMeasurements + 1)) {
                    writer.Write(this._DistanceMeasurements[indexDistanceMeasurements]);
                }
            }
            writer.Write(this._MaxDistance);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes ArduinoSonarTurretState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ArduinoSonarTurretState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._AngularRange = reader.ReadDouble();
            this._AngularResolution = reader.ReadDouble();
            this._DistanceMeasurement = reader.ReadDouble();
            if ((reader.ReadByte() != 0)) {
                int tmp0 = reader.ReadInt32();
                int count0 = reader.ReadInt32();
                this._DistanceMeasurements = new double[count0];
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._DistanceMeasurements[index] = reader.ReadDouble();
                }
            }
            this._MaxDistance = reader.ReadDouble();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.pferro/2013/03/arduinosonarturret.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.pferro/2013/03/arduinosonarturret.html", ElementName="RangePositionRead")]
    public class RangePositionRead : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RangePositionRead() {
        }
        
        private int _SweepAngularStep;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the sonar\'s scanning angle.")]
        public int SweepAngularStep {
            get {
                return this._SweepAngularStep;
            }
            set {
                this._SweepAngularStep = value;
            }
        }
        
        private double _CurrentAngle;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the sonar\'s scanning angle.")]
        public double CurrentAngle {
            get {
                return this._CurrentAngle;
            }
            set {
                this._CurrentAngle = value;
            }
        }
        
        private double _DistanceMeasurement;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the distance reading of the sonar in meters.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double DistanceMeasurement {
            get {
                return this._DistanceMeasurement;
            }
            set {
                this._DistanceMeasurement = value;
            }
        }
        
        private int _HardwareIdentifier;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the hardware port of the sonar sensor.")]
        public int HardwareIdentifier {
            get {
                return this._HardwareIdentifier;
            }
            set {
                this._HardwareIdentifier = value;
            }
        }
        
        private double _MaxDistance;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the maximum distance the sensor can read in meters.")]
        public double MaxDistance {
            get {
                return this._MaxDistance;
            }
            set {
                this._MaxDistance = value;
            }
        }
        
        private global::Microsoft.Robotics.PhysicalModel.Proxy.Pose _Pose;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The position and orientation of the sonar sensor.")]
        public global::Microsoft.Robotics.PhysicalModel.Proxy.Pose Pose {
            get {
                return this._Pose;
            }
            set {
                this._Pose = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlOmitDefaultValue=true)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the timestamp for the reading of the sonar sensor.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.ComponentModel.DefaultValueAttribute(typeof(global::System.DateTime), "0001-01-01T00:00:00")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RangePositionRead to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead typedTarget = ((global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead)(target));
            typedTarget._SweepAngularStep = this._SweepAngularStep;
            typedTarget._CurrentAngle = this._CurrentAngle;
            typedTarget._DistanceMeasurement = this._DistanceMeasurement;
            typedTarget._HardwareIdentifier = this._HardwareIdentifier;
            typedTarget._MaxDistance = this._MaxDistance;
            typedTarget._Pose = this._Pose;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones RangePositionRead
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead target0 = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RangePositionRead to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._SweepAngularStep);
            writer.Write(this._CurrentAngle);
            writer.Write(this._DistanceMeasurement);
            writer.Write(this._HardwareIdentifier);
            writer.Write(this._MaxDistance);
            ((Microsoft.Dss.Core.IDssSerializable)(this._Pose)).Serialize(writer);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes RangePositionRead
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RangePositionRead</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SweepAngularStep = reader.ReadInt32();
            this._CurrentAngle = reader.ReadDouble();
            this._DistanceMeasurement = reader.ReadDouble();
            this._HardwareIdentifier = reader.ReadInt32();
            this._MaxDistance = reader.ReadDouble();
            this._Pose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.PhysicalModel.Proxy.Pose())).Deserialize(reader)));
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RangeSweep : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public RangeSweep() {
        }
        
        public RangeSweep(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest body) : 
                base(body) {
        }
        
        public RangeSweep(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RangePositionReadNotify : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public RangePositionReadNotify() {
        }
        
        public RangePositionReadNotify(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead body) : 
                base(body) {
        }
        
        public RangePositionReadNotify(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RangeSweepCompleteNotify : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public RangeSweepCompleteNotify() {
        }
        
        public RangeSweepCompleteNotify(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState body) : 
                base(body) {
        }
        
        public RangeSweepCompleteNotify(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ArduinoSonarTurretOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweep, global:: POFerro.Robotics.ArduinoSonarTurret.Proxy.Get, global:: POFerro.Robotics.ArduinoSonarTurret.Proxy.Subscribe, global:: POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionReadNotify, global:: POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepCompleteNotify> {
        
        public ArduinoSonarTurretOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> RangeSweep() {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest();
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweep operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweep(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RangeSweep(out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweep operation) {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest();
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweep(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> RangeSweep(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest body) {
            if ((body == null)) {
                body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest();
            }
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweep operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweep(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RangeSweep(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest body, out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweep operation) {
            if ((body == null)) {
                body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepRequest();
            }
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweep(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Get operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Get operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Subscribe operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Subscribe operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> RangePositionReadNotify() {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead();
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionReadNotify operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionReadNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RangePositionReadNotify(out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionReadNotify operation) {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead();
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionReadNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> RangePositionReadNotify(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead body) {
            if ((body == null)) {
                body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead();
            }
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionReadNotify operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionReadNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RangePositionReadNotify(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead body, out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionReadNotify operation) {
            if ((body == null)) {
                body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionRead();
            }
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangePositionReadNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> RangeSweepCompleteNotify() {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState();
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepCompleteNotify operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepCompleteNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RangeSweepCompleteNotify(out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepCompleteNotify operation) {
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState();
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepCompleteNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> RangeSweepCompleteNotify(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState body) {
            if ((body == null)) {
                body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState();
            }
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepCompleteNotify operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepCompleteNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RangeSweepCompleteNotify(global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState body, out global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepCompleteNotify operation) {
            if ((body == null)) {
                body = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState();
            }
            operation = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.RangeSweepCompleteNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("ArduinoSonarTurret service (no description provided)")]
    [global::System.ComponentModel.DisplayNameAttribute("ArduinoSonarTurret")]
    public class Contract {
        
        public const string Identifier = "http://schemas.pferro/2013/03/arduinosonarturret.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.pferro/2013/03/arduinosonarturret.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.pferro/2013/03/arduinosonarturret.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ArduinoSonarTurretOperations = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretOperations();
            this.SonarOperations = new global::Microsoft.Robotics.Services.Sonar.Proxy.SonarOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ArduinoSonarTurretOperations, "http://schemas.pferro/2013/03/arduinosonarturret.html", "ArduinoSonarTurretOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SonarOperations, "http://schemas.microsoft.com/robotics/2006/06/sonar.html", "SonarOperations", null));
        }
        
        public global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretOperations ArduinoSonarTurretOperations;
        
        public global::Microsoft.Robotics.Services.Sonar.Proxy.SonarOperations SonarOperations;
    }
}
