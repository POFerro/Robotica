//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("Kinect")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.Kinect.Y2011.M01, Version=0.0.0.0, Culture=neutral, PublicKeyToken=e3a6d1d8e" +
    "a7297f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceTypeRegistrationRequiredAttribute()]

namespace Microsoft.Robotics.Services.Sensors.Kinect.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="KinectState")]
    public class KinectState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public KinectState() {
        }
        
        private double _FrameRate;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double FrameRate {
            get {
                return this._FrameRate;
            }
            set {
                this._FrameRate = value;
            }
        }
        
        private double _TiltDegrees;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double TiltDegrees {
            get {
                return this._TiltDegrees;
            }
            set {
                this._TiltDegrees = value;
            }
        }
        
        private int _DeviceID;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int DeviceID {
            get {
                return this._DeviceID;
            }
            set {
                this._DeviceID = value;
            }
        }
        
        private bool _UseColor;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool UseColor {
            get {
                return this._UseColor;
            }
            set {
                this._UseColor = value;
            }
        }
        
        private bool _UseDepth;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool UseDepth {
            get {
                return this._UseDepth;
            }
            set {
                this._UseDepth = value;
            }
        }
        
        private bool _UseSkeletalTracking;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool UseSkeletalTracking {
            get {
                return this._UseSkeletalTracking;
            }
            set {
                this._UseSkeletalTracking = value;
            }
        }
        
        private bool _UseAudioStream;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool UseAudioStream {
            get {
                return this._UseAudioStream;
            }
            set {
                this._UseAudioStream = value;
            }
        }
        
        private global::Microsoft.Kinect.ColorImageFormat _ColorImageFormat;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Kinect.ColorImageFormat ColorImageFormat {
            get {
                return this._ColorImageFormat;
            }
            set {
                this._ColorImageFormat = value;
            }
        }
        
        private global::Microsoft.Kinect.DepthImageFormat _DepthImageFormat;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Kinect.DepthImageFormat DepthImageFormat {
            get {
                return this._DepthImageFormat;
            }
            set {
                this._DepthImageFormat = value;
            }
        }
        
        private global::Microsoft.Kinect.DepthRange _DepthStreamRange;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Kinect.DepthRange DepthStreamRange {
            get {
                return this._DepthStreamRange;
            }
            set {
                this._DepthStreamRange = value;
            }
        }
        
        private bool _TransformSmooth;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool TransformSmooth {
            get {
                return this._TransformSmooth;
            }
            set {
                this._TransformSmooth = value;
            }
        }
        
        private global::Microsoft.Kinect.TransformSmoothParameters _SkeletalEngineTransformSmoothParameters;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Kinect.TransformSmoothParameters SkeletalEngineTransformSmoothParameters {
            get {
                return this._SkeletalEngineTransformSmoothParameters;
            }
            set {
                this._SkeletalEngineTransformSmoothParameters = value;
            }
        }
        
        private bool _IsDepthServiceUpdateEnabled;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IsDepthServiceUpdateEnabled {
            get {
                return this._IsDepthServiceUpdateEnabled;
            }
            set {
                this._IsDepthServiceUpdateEnabled = value;
            }
        }
        
        private bool _IsWebCamServiceUpdateEnabled;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IsWebCamServiceUpdateEnabled {
            get {
                return this._IsWebCamServiceUpdateEnabled;
            }
            set {
                this._IsWebCamServiceUpdateEnabled = value;
            }
        }
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public const double MaxFrameRate = 30D;
        
        /// <summary>
        ///Copies the data member values of the current KinectState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState)(target));
            typedTarget._FrameRate = this._FrameRate;
            typedTarget._TiltDegrees = this._TiltDegrees;
            typedTarget._DeviceID = this._DeviceID;
            typedTarget._UseColor = this._UseColor;
            typedTarget._UseDepth = this._UseDepth;
            typedTarget._UseSkeletalTracking = this._UseSkeletalTracking;
            typedTarget._UseAudioStream = this._UseAudioStream;
            typedTarget._ColorImageFormat = this._ColorImageFormat;
            typedTarget._DepthImageFormat = this._DepthImageFormat;
            typedTarget._DepthStreamRange = this._DepthStreamRange;
            typedTarget._TransformSmooth = this._TransformSmooth;
            typedTarget._SkeletalEngineTransformSmoothParameters = this._SkeletalEngineTransformSmoothParameters;
            typedTarget._IsDepthServiceUpdateEnabled = this._IsDepthServiceUpdateEnabled;
            typedTarget._IsWebCamServiceUpdateEnabled = this._IsWebCamServiceUpdateEnabled;
        }
        
        /// <summary>
        ///Clones KinectState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current KinectState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._FrameRate);
            writer.Write(this._TiltDegrees);
            writer.Write(this._DeviceID);
            writer.Write(this._UseColor);
            writer.Write(this._UseDepth);
            writer.Write(this._UseSkeletalTracking);
            writer.Write(this._UseAudioStream);
            writer.Write(((int)(this._ColorImageFormat)));
            writer.Write(((int)(this._DepthImageFormat)));
            writer.Write(((int)(this._DepthStreamRange)));
            writer.Write(this._TransformSmooth);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._SkeletalEngineTransformSmoothParameters);
            writer.Write(this._IsDepthServiceUpdateEnabled);
            writer.Write(this._IsWebCamServiceUpdateEnabled);
        }
        
        /// <summary>
        ///Deserializes KinectState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized KinectState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._FrameRate = reader.ReadDouble();
            this._TiltDegrees = reader.ReadDouble();
            this._DeviceID = reader.ReadInt32();
            this._UseColor = reader.ReadBoolean();
            this._UseDepth = reader.ReadBoolean();
            this._UseSkeletalTracking = reader.ReadBoolean();
            this._UseAudioStream = reader.ReadBoolean();
            this._ColorImageFormat = ((global::Microsoft.Kinect.ColorImageFormat)(reader.ReadInt32()));
            this._DepthImageFormat = ((global::Microsoft.Kinect.DepthImageFormat)(reader.ReadInt32()));
            this._DepthStreamRange = ((global::Microsoft.Kinect.DepthRange)(reader.ReadInt32()));
            this._TransformSmooth = reader.ReadBoolean();
            this._SkeletalEngineTransformSmoothParameters = ((global::Microsoft.Kinect.TransformSmoothParameters)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::Microsoft.Kinect.TransformSmoothParameters))));
            this._IsDepthServiceUpdateEnabled = reader.ReadBoolean();
            this._IsWebCamServiceUpdateEnabled = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="QueryRawFrameRequest")]
    public class QueryRawFrameRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public QueryRawFrameRequest() {
        }
        
        private bool _IncludeDepth;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IncludeDepth {
            get {
                return this._IncludeDepth;
            }
            set {
                this._IncludeDepth = value;
            }
        }
        
        private bool _IncludeVideo;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IncludeVideo {
            get {
                return this._IncludeVideo;
            }
            set {
                this._IncludeVideo = value;
            }
        }
        
        private bool _IncludeSkeletons;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IncludeSkeletons {
            get {
                return this._IncludeSkeletons;
            }
            set {
                this._IncludeSkeletons = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current QueryRawFrameRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest)(target));
            typedTarget._IncludeDepth = this._IncludeDepth;
            typedTarget._IncludeVideo = this._IncludeVideo;
            typedTarget._IncludeSkeletons = this._IncludeSkeletons;
        }
        
        /// <summary>
        ///Clones QueryRawFrameRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current QueryRawFrameRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._IncludeDepth);
            writer.Write(this._IncludeVideo);
            writer.Write(this._IncludeSkeletons);
        }
        
        /// <summary>
        ///Deserializes QueryRawFrameRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized QueryRawFrameRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._IncludeDepth = reader.ReadBoolean();
            this._IncludeVideo = reader.ReadBoolean();
            this._IncludeSkeletons = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="GetRawFrameResponse")]
    public class GetRawFrameResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public GetRawFrameResponse() {
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames _RawFrames;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames RawFrames {
            get {
                return this._RawFrames;
            }
            set {
                this._RawFrames = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current GetRawFrameResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse)(target));
            if ((this._RawFrames != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames tmp = new global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RawFrames)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._RawFrames = tmp;
            }
        }
        
        /// <summary>
        ///Clones GetRawFrameResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GetRawFrameResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._RawFrames == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RawFrames)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes GetRawFrameResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GetRawFrameResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._RawFrames = ((global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="SetFrameRateRequest")]
    public class SetFrameRateRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetFrameRateRequest() {
        }
        
        public SetFrameRateRequest(double frameRate) {
            this._FrameRate = frameRate;
        }
        
        private double _FrameRate;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public double FrameRate {
            get {
                return this._FrameRate;
            }
            set {
                this._FrameRate = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetFrameRateRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest)(target));
            typedTarget._FrameRate = this._FrameRate;
        }
        
        /// <summary>
        ///Clones SetFrameRateRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetFrameRateRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._FrameRate);
        }
        
        /// <summary>
        ///Deserializes SetFrameRateRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetFrameRateRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._FrameRate = reader.ReadDouble();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="UpdateTiltRequest")]
    public class UpdateTiltRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public UpdateTiltRequest() {
        }
        
        private double _Tilt;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Tilt {
            get {
                return this._Tilt;
            }
            set {
                this._Tilt = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current UpdateTiltRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest)(target));
            typedTarget._Tilt = this._Tilt;
        }
        
        /// <summary>
        ///Clones UpdateTiltRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current UpdateTiltRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Tilt);
        }
        
        /// <summary>
        ///Deserializes UpdateTiltRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized UpdateTiltRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Tilt = reader.ReadDouble();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="DepthToColorRequest")]
    public class DepthToColorRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DepthToColorRequest() {
        }
        
        private int _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private int _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private uint _Depth;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public uint Depth {
            get {
                return this._Depth;
            }
            set {
                this._Depth = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DepthToColorRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest)(target));
            typedTarget._X = this._X;
            typedTarget._Y = this._Y;
            typedTarget._Depth = this._Depth;
        }
        
        /// <summary>
        ///Clones DepthToColorRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DepthToColorRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X);
            writer.Write(this._Y);
            writer.Write(this._Depth);
        }
        
        /// <summary>
        ///Deserializes DepthToColorRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DepthToColorRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._X = reader.ReadInt32();
            this._Y = reader.ReadInt32();
            this._Depth = reader.ReadUInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="DepthToColorResponse")]
    public class DepthToColorResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DepthToColorResponse() {
        }
        
        private int _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private int _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DepthToColorResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse)(target));
            typedTarget._X = this._X;
            typedTarget._Y = this._Y;
        }
        
        /// <summary>
        ///Clones DepthToColorResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DepthToColorResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X);
            writer.Write(this._Y);
        }
        
        /// <summary>
        ///Deserializes DepthToColorResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DepthToColorResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._X = reader.ReadInt32();
            this._Y = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="SkeletonToDepthImageRequest")]
    public class SkeletonToDepthImageRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SkeletonToDepthImageRequest() {
        }
        
        private global::Microsoft.Kinect.SkeletonPoint _SkeletonVector;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Kinect.SkeletonPoint SkeletonVector {
            get {
                return this._SkeletonVector;
            }
            set {
                this._SkeletonVector = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SkeletonToDepthImageRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest)(target));
            typedTarget._SkeletonVector = this._SkeletonVector;
        }
        
        /// <summary>
        ///Clones SkeletonToDepthImageRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SkeletonToDepthImageRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._SkeletonVector);
        }
        
        /// <summary>
        ///Deserializes SkeletonToDepthImageRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SkeletonToDepthImageRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SkeletonVector = ((global::Microsoft.Kinect.SkeletonPoint)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::Microsoft.Kinect.SkeletonPoint))));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="SkeletonToDepthImageResponse")]
    public class SkeletonToDepthImageResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SkeletonToDepthImageResponse() {
        }
        
        private global::Microsoft.Kinect.DepthImagePoint _DepthPoint;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Kinect.DepthImagePoint DepthPoint {
            get {
                return this._DepthPoint;
            }
            set {
                this._DepthPoint = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SkeletonToDepthImageResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse)(target));
            typedTarget._DepthPoint = this._DepthPoint;
        }
        
        /// <summary>
        ///Clones SkeletonToDepthImageResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SkeletonToDepthImageResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._DepthPoint);
        }
        
        /// <summary>
        ///Deserializes SkeletonToDepthImageResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SkeletonToDepthImageResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._DepthPoint = ((global::Microsoft.Kinect.DepthImagePoint)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::Microsoft.Kinect.DepthImagePoint))));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="SkeletonToColorImageRequest")]
    public class SkeletonToColorImageRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SkeletonToColorImageRequest() {
        }
        
        private global::Microsoft.Kinect.SkeletonPoint _SkeletonVector;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Kinect.SkeletonPoint SkeletonVector {
            get {
                return this._SkeletonVector;
            }
            set {
                this._SkeletonVector = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SkeletonToColorImageRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest)(target));
            typedTarget._SkeletonVector = this._SkeletonVector;
        }
        
        /// <summary>
        ///Clones SkeletonToColorImageRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SkeletonToColorImageRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._SkeletonVector);
        }
        
        /// <summary>
        ///Deserializes SkeletonToColorImageRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SkeletonToColorImageRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SkeletonVector = ((global::Microsoft.Kinect.SkeletonPoint)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::Microsoft.Kinect.SkeletonPoint))));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="SkeletonToColorImageResponse")]
    public class SkeletonToColorImageResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SkeletonToColorImageResponse() {
        }
        
        private int _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private int _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SkeletonToColorImageResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse)(target));
            typedTarget._X = this._X;
            typedTarget._Y = this._Y;
        }
        
        /// <summary>
        ///Clones SkeletonToColorImageResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SkeletonToColorImageResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X);
            writer.Write(this._Y);
        }
        
        /// <summary>
        ///Deserializes SkeletonToColorImageResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SkeletonToColorImageResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._X = reader.ReadInt32();
            this._Y = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="DepthImageToSkeletonRequest")]
    public class DepthImageToSkeletonRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DepthImageToSkeletonRequest() {
        }
        
        private int _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private int _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private short _Depth;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public short Depth {
            get {
                return this._Depth;
            }
            set {
                this._Depth = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DepthImageToSkeletonRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest)(target));
            typedTarget._X = this._X;
            typedTarget._Y = this._Y;
            typedTarget._Depth = this._Depth;
        }
        
        /// <summary>
        ///Clones DepthImageToSkeletonRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DepthImageToSkeletonRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X);
            writer.Write(this._Y);
            writer.Write(this._Depth);
        }
        
        /// <summary>
        ///Deserializes DepthImageToSkeletonRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DepthImageToSkeletonRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._X = reader.ReadInt32();
            this._Y = reader.ReadInt32();
            this._Depth = reader.ReadInt16();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="DepthImageToSkeletonResponse")]
    public class DepthImageToSkeletonResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DepthImageToSkeletonResponse() {
        }
        
        private global::Microsoft.Kinect.SkeletonPoint _SkeletonVector;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Kinect.SkeletonPoint SkeletonVector {
            get {
                return this._SkeletonVector;
            }
            set {
                this._SkeletonVector = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DepthImageToSkeletonResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse)(target));
            typedTarget._SkeletonVector = this._SkeletonVector;
        }
        
        /// <summary>
        ///Clones DepthImageToSkeletonResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DepthImageToSkeletonResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._SkeletonVector);
        }
        
        /// <summary>
        ///Deserializes DepthImageToSkeletonResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DepthImageToSkeletonResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SkeletonVector = ((global::Microsoft.Kinect.SkeletonPoint)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::Microsoft.Kinect.SkeletonPoint))));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="UpdateSkeletalSmoothingRequest")]
    public class UpdateSkeletalSmoothingRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public UpdateSkeletalSmoothingRequest() {
        }
        
        private bool _TransfrormSmooth;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool TransfrormSmooth {
            get {
                return this._TransfrormSmooth;
            }
            set {
                this._TransfrormSmooth = value;
            }
        }
        
        private global::Microsoft.Kinect.TransformSmoothParameters _SkeletalEngineTransformSmoothParameters;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Kinect.TransformSmoothParameters SkeletalEngineTransformSmoothParameters {
            get {
                return this._SkeletalEngineTransformSmoothParameters;
            }
            set {
                this._SkeletalEngineTransformSmoothParameters = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current UpdateSkeletalSmoothingRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest)(target));
            typedTarget._TransfrormSmooth = this._TransfrormSmooth;
            typedTarget._SkeletalEngineTransformSmoothParameters = this._SkeletalEngineTransformSmoothParameters;
        }
        
        /// <summary>
        ///Clones UpdateSkeletalSmoothingRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current UpdateSkeletalSmoothingRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TransfrormSmooth);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._SkeletalEngineTransformSmoothParameters);
        }
        
        /// <summary>
        ///Deserializes UpdateSkeletalSmoothingRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized UpdateSkeletalSmoothingRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TransfrormSmooth = reader.ReadBoolean();
            this._SkeletalEngineTransformSmoothParameters = ((global::Microsoft.Kinect.TransformSmoothParameters)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::Microsoft.Kinect.TransformSmoothParameters))));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="GetDepthPropertiesResponse")]
    public class GetDepthPropertiesResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public GetDepthPropertiesResponse() {
        }
        
        private int _MaxDepthValue;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int MaxDepthValue {
            get {
                return this._MaxDepthValue;
            }
            set {
                this._MaxDepthValue = value;
            }
        }
        
        private int _MinDepthValue;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int MinDepthValue {
            get {
                return this._MinDepthValue;
            }
            set {
                this._MinDepthValue = value;
            }
        }
        
        private int _TooFarDepthValue;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int TooFarDepthValue {
            get {
                return this._TooFarDepthValue;
            }
            set {
                this._TooFarDepthValue = value;
            }
        }
        
        private int _TooNearDepthValue;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int TooNearDepthValue {
            get {
                return this._TooNearDepthValue;
            }
            set {
                this._TooNearDepthValue = value;
            }
        }
        
        private int _UnknownDepthValue;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int UnknownDepthValue {
            get {
                return this._UnknownDepthValue;
            }
            set {
                this._UnknownDepthValue = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current GetDepthPropertiesResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse)(target));
            typedTarget._MaxDepthValue = this._MaxDepthValue;
            typedTarget._MinDepthValue = this._MinDepthValue;
            typedTarget._TooFarDepthValue = this._TooFarDepthValue;
            typedTarget._TooNearDepthValue = this._TooNearDepthValue;
            typedTarget._UnknownDepthValue = this._UnknownDepthValue;
        }
        
        /// <summary>
        ///Clones GetDepthPropertiesResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GetDepthPropertiesResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._MaxDepthValue);
            writer.Write(this._MinDepthValue);
            writer.Write(this._TooFarDepthValue);
            writer.Write(this._TooNearDepthValue);
            writer.Write(this._UnknownDepthValue);
        }
        
        /// <summary>
        ///Deserializes GetDepthPropertiesResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GetDepthPropertiesResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._MaxDepthValue = reader.ReadInt32();
            this._MinDepthValue = reader.ReadInt32();
            this._TooFarDepthValue = reader.ReadInt32();
            this._TooNearDepthValue = reader.ReadInt32();
            this._UnknownDepthValue = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="SoundSourceInfo")]
    public class SoundSourceInfo : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SoundSourceInfo() {
        }
        
        private double _CurrentConfidenceLevel;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double CurrentConfidenceLevel {
            get {
                return this._CurrentConfidenceLevel;
            }
            set {
                this._CurrentConfidenceLevel = value;
            }
        }
        
        private double _CurrentAngle;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double CurrentAngle {
            get {
                return this._CurrentAngle;
            }
            set {
                this._CurrentAngle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SoundSourceInfo to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo)(target));
            typedTarget._CurrentConfidenceLevel = this._CurrentConfidenceLevel;
            typedTarget._CurrentAngle = this._CurrentAngle;
        }
        
        /// <summary>
        ///Clones SoundSourceInfo
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SoundSourceInfo to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._CurrentConfidenceLevel);
            writer.Write(this._CurrentAngle);
        }
        
        /// <summary>
        ///Deserializes SoundSourceInfo
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SoundSourceInfo</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._CurrentConfidenceLevel = reader.ReadDouble();
            this._CurrentAngle = reader.ReadDouble();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="KinectFrameInfo")]
    public class KinectFrameInfo : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public KinectFrameInfo() {
        }
        
        /// <summary>
        ///Copies the data member values of the current KinectFrameInfo to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo)(target));
        }
        
        /// <summary>
        ///Clones KinectFrameInfo
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current KinectFrameInfo to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes KinectFrameInfo
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized KinectFrameInfo</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="SkeletonDataFrame")]
    public class SkeletonDataFrame : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SkeletonDataFrame() {
        }
        
        /// <summary>
        ///Copies the data member values of the current SkeletonDataFrame to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonDataFrame typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonDataFrame)(target));
        }
        
        /// <summary>
        ///Clones SkeletonDataFrame
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonDataFrame target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonDataFrame();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SkeletonDataFrame to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes SkeletonDataFrame
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SkeletonDataFrame</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="ColorDataFrame")]
    public class ColorDataFrame : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ColorDataFrame() {
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo _RawColorFrameInfo;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo RawColorFrameInfo {
            get {
                return this._RawColorFrameInfo;
            }
            set {
                this._RawColorFrameInfo = value;
            }
        }
        
        private byte[] _RawColorFrameData;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte[] RawColorFrameData {
            get {
                return this._RawColorFrameData;
            }
            set {
                this._RawColorFrameData = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ColorDataFrame to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.ColorDataFrame typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.ColorDataFrame)(target));
            if ((this._RawColorFrameInfo != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo tmp = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RawColorFrameInfo)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._RawColorFrameInfo = tmp;
            }
            if ((this._RawColorFrameData != null)) {
                int count = this._RawColorFrameData.Length;
                byte[] tmp0 = new byte[count];
                global::System.Buffer.BlockCopy(this._RawColorFrameData, 0, tmp0, 0, global::System.Buffer.ByteLength(this._RawColorFrameData));
                typedTarget._RawColorFrameData = tmp0;
            }
        }
        
        /// <summary>
        ///Clones ColorDataFrame
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.ColorDataFrame target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.ColorDataFrame();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ColorDataFrame to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._RawColorFrameInfo == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RawColorFrameInfo)).Serialize(writer);
            }
            if ((this._RawColorFrameData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._RawColorFrameData.Length);
                writer.Write(this._RawColorFrameData);
            }
        }
        
        /// <summary>
        ///Deserializes ColorDataFrame
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ColorDataFrame</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._RawColorFrameInfo = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._RawColorFrameData = reader.ReadBytes(count0);
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="DepthDataFrame")]
    public class DepthDataFrame : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DepthDataFrame() {
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo _RawDepthFrameInfo;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo RawDepthFrameInfo {
            get {
                return this._RawDepthFrameInfo;
            }
            set {
                this._RawDepthFrameInfo = value;
            }
        }
        
        private short[] _RawDepthFrameData;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public short[] RawDepthFrameData {
            get {
                return this._RawDepthFrameData;
            }
            set {
                this._RawDepthFrameData = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DepthDataFrame to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthDataFrame typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthDataFrame)(target));
            if ((this._RawDepthFrameInfo != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo tmp = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RawDepthFrameInfo)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._RawDepthFrameInfo = tmp;
            }
            if ((this._RawDepthFrameData != null)) {
                int count = this._RawDepthFrameData.Length;
                short[] tmp0 = new short[count];
                global::System.Buffer.BlockCopy(this._RawDepthFrameData, 0, tmp0, 0, global::System.Buffer.ByteLength(this._RawDepthFrameData));
                typedTarget._RawDepthFrameData = tmp0;
            }
        }
        
        /// <summary>
        ///Clones DepthDataFrame
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthDataFrame target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthDataFrame();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DepthDataFrame to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._RawDepthFrameInfo == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RawDepthFrameInfo)).Serialize(writer);
            }
            if ((this._RawDepthFrameData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._RawDepthFrameData.Length);
                for (int indexRawDepthFrameData = 0; (indexRawDepthFrameData < this._RawDepthFrameData.Length); indexRawDepthFrameData = (indexRawDepthFrameData + 1)) {
                    writer.Write(this._RawDepthFrameData[indexRawDepthFrameData]);
                }
            }
        }
        
        /// <summary>
        ///Deserializes DepthDataFrame
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DepthDataFrame</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._RawDepthFrameInfo = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                int tmp1 = reader.ReadInt32();
                int count0 = reader.ReadInt32();
                this._RawDepthFrameData = new short[count0];
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._RawDepthFrameData[index] = reader.ReadInt16();
                }
            }
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class QueryRawFrame : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse, global:: W3C.Soap.Fault>> {
        
        public QueryRawFrame() {
        }
        
        public QueryRawFrame(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest body) : 
                base(body) {
        }
        
        public QueryRawFrame(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetFrameRate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetFrameRate() {
        }
        
        public SetFrameRate(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest body) : 
                base(body) {
        }
        
        public SetFrameRate(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateTilt : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateTilt() {
        }
        
        public UpdateTilt(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest body) : 
                base(body) {
        }
        
        public UpdateTilt(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DepthToColorImage : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse, global:: W3C.Soap.Fault>> {
        
        public DepthToColorImage() {
        }
        
        public DepthToColorImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest body) : 
                base(body) {
        }
        
        public DepthToColorImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SkeletonToDepthImage : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse, global:: W3C.Soap.Fault>> {
        
        public SkeletonToDepthImage() {
        }
        
        public SkeletonToDepthImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest body) : 
                base(body) {
        }
        
        public SkeletonToDepthImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SkeletonToColorImage : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse, global:: W3C.Soap.Fault>> {
        
        public SkeletonToColorImage() {
        }
        
        public SkeletonToColorImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest body) : 
                base(body) {
        }
        
        public SkeletonToColorImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DepthImageToSkeleton : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse, global:: W3C.Soap.Fault>> {
        
        public DepthImageToSkeleton() {
        }
        
        public DepthImageToSkeleton(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest body) : 
                base(body) {
        }
        
        public DepthImageToSkeleton(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateSkeletalSmoothing : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateSkeletalSmoothing() {
        }
        
        public UpdateSkeletalSmoothing(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest body) : 
                base(body) {
        }
        
        public UpdateSkeletalSmoothing(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class GetDepthProperties : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse, global:: W3C.Soap.Fault>> {
        
        public GetDepthProperties() {
        }
        
        public GetDepthProperties(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public GetDepthProperties(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SoundSourceAngleChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SoundSourceAngleChanged() {
        }
        
        public SoundSourceAngleChanged(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo body) : 
                base(body) {
        }
        
        public SoundSourceAngleChanged(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class KinectOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Get, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Subscribe, global:: Microsoft.Dss.Core.DsspHttp.HttpPost, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Dss.Core.DsspHttp.HttpQuery, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrame, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRate, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTilt, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorImage, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImage, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImage, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeleton, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothing, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthProperties, global:: Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceAngleChanged> {
        
        public KinectOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost() {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery() {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse, global:: W3C.Soap.Fault> QueryRawFrame() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrame operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryRawFrame(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrame operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse, global:: W3C.Soap.Fault> QueryRawFrame(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrame operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryRawFrame(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrame operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetFrameRate(double frameRate) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest(frameRate);
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRate operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetFrameRate(double frameRate, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRate operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest(frameRate);
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetFrameRate(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRate operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetFrameRate(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateTilt() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTilt operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTilt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateTilt(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTilt operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTilt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateTilt(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTilt operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTilt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateTilt(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTilt operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTilt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse, global:: W3C.Soap.Fault> DepthToColorImage() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorImage operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DepthToColorImage(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorImage operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse, global:: W3C.Soap.Fault> DepthToColorImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorImage operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DepthToColorImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorImage operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse, global:: W3C.Soap.Fault> SkeletonToDepthImage() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImage operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SkeletonToDepthImage(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImage operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse, global:: W3C.Soap.Fault> SkeletonToDepthImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImage operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SkeletonToDepthImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImage operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse, global:: W3C.Soap.Fault> SkeletonToColorImage() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImage operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SkeletonToColorImage(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImage operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse, global:: W3C.Soap.Fault> SkeletonToColorImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImage operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SkeletonToColorImage(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImage operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse, global:: W3C.Soap.Fault> DepthImageToSkeleton() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeleton operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeleton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DepthImageToSkeleton(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeleton operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeleton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse, global:: W3C.Soap.Fault> DepthImageToSkeleton(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeleton operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeleton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DepthImageToSkeleton(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeleton operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeleton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateSkeletalSmoothing() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothing operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothing(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateSkeletalSmoothing(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothing operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothing(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateSkeletalSmoothing(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothing operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothing(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateSkeletalSmoothing(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothing operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothing(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse, global:: W3C.Soap.Fault> GetDepthProperties() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthProperties operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthProperties(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetDepthProperties(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthProperties operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthProperties(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse, global:: W3C.Soap.Fault> GetDepthProperties(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthProperties operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthProperties(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetDepthProperties(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthProperties operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthProperties(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SoundSourceAngleChanged() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceAngleChanged operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceAngleChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SoundSourceAngleChanged(out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceAngleChanged operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceAngleChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SoundSourceAngleChanged(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceAngleChanged operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceAngleChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SoundSourceAngleChanged(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo body, out global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceAngleChanged operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceAngleChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", ElementName="KinectReservedSampleValues")]
    public enum KinectReservedSampleValues : int {
        
        MaximumTiltAngle = 27,
        
        MinimumTiltAngle = -27,
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Represents a Kinect depth camera")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Kinect")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2011/08/kinect.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.KinectOperations = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectOperations();
            this.PanTiltOperationsPort = new global::Microsoft.Robotics.Services.PanTilt.Proxy.PanTiltOperationsPort();
            this.WebCamSensorOperations = new global::Microsoft.Robotics.Services.WebCamSensor.Proxy.WebCamSensorOperations();
            this.DepthCamSensorOperationsPort = new global::Microsoft.Robotics.Services.DepthCamSensor.Proxy.DepthCamSensorOperationsPort();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.KinectOperations, "http://schemas.microsoft.com/robotics/2011/08/kinect.user.html", "KinectOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.PanTiltOperationsPort, "http://schemas.microsoft.com/robotics/2011/10/pantilt.html", "PanTiltOperationsPort", "/pantilt"), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.WebCamSensorOperations, "http://schemas.microsoft.com/robotics/2011/01/webcamsensor.user.html", "WebCamSensorOperations", "/kinectwebcamsensor"), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DepthCamSensorOperationsPort, "http://schemas.microsoft.com/robotics/2011/01/depthcamsensor.user.html", "DepthCamSensorOperationsPort", "/kinectdepthcamsensor"));
        }
        
        public global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectOperations KinectOperations;
        
        public global::Microsoft.Robotics.Services.PanTilt.Proxy.PanTiltOperationsPort PanTiltOperationsPort;
        
        public global::Microsoft.Robotics.Services.WebCamSensor.Proxy.WebCamSensorOperations WebCamSensorOperations;
        
        public global::Microsoft.Robotics.Services.DepthCamSensor.Proxy.DepthCamSensorOperationsPort DepthCamSensorOperationsPort;
    }
}
