//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("Kinect")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.Kinect.Y2011.M01, Version=0.0.0.0, Culture=neutral, PublicKeyToken=e3a6d1d8e" +
    "a7297f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectState_TO_Microsoft_Robotics_Services_Sensors_Kinect_KinectState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.KinectState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_KinectState_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_QueryRawFrameRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_QueryRawFrameRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.QueryRawFrameRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_QueryRawFrameRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_QueryRawFrameRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_GetRawFrameResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_GetRawFrameResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.GetRawFrameResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_GetRawFrameResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_GetRawFrameResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SetFrameRateRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_SetFrameRateRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.SetFrameRateRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_SetFrameRateRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SetFrameRateRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_UpdateTiltRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_UpdateTiltRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateTiltRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_UpdateTiltRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_UpdateTiltRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthToColorRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthToColorRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_DepthToColorRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthToColorRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthToColorResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthToColorResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_DepthToColorResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthToColorResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToDepthImageRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToDepthImageRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToDepthImageRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToDepthImageRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToDepthImageResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToDepthImageResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToDepthImageResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToDepthImageResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToColorImageRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToColorImageRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToColorImageRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToColorImageRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToColorImageResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToColorImageResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToColorImageResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToColorImageResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthImageToSkeletonRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthImageToSkeletonRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_DepthImageToSkeletonRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthImageToSkeletonRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthImageToSkeletonResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthImageToSkeletonResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_DepthImageToSkeletonResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthImageToSkeletonResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_UpdateSkeletalSmoothingRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_UpdateSkeletalSmoothingRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateSkeletalSmoothingRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_UpdateSkeletalSmoothingRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_UpdateSkeletalSmoothingRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_GetDepthPropertiesResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_GetDepthPropertiesResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.GetDepthPropertiesResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_GetDepthPropertiesResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_GetDepthPropertiesResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SoundSourceInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_SoundSourceInfo));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.SoundSourceInfo), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_SoundSourceInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SoundSourceInfo));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectFrameInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_KinectFrameInfo));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.KinectFrameInfo), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_KinectFrameInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectFrameInfo));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonDataFrame), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonDataFrame));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonDataFrame), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_SkeletonDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonDataFrame));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.ColorDataFrame), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_ColorDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_ColorDataFrame));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.ColorDataFrame), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_ColorDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_ColorDataFrame));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthDataFrame), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthDataFrame));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sensors.Kinect.DepthDataFrame), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sensors_Kinect_DepthDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthDataFrame));
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectState_TO_Microsoft_Robotics_Services_Sensors_Kinect_KinectState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.KinectState target = new global::Microsoft.Robotics.Services.Sensors.Kinect.KinectState();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState)(transformFrom));
            target.FrameRate = from.FrameRate;
            target.TiltDegrees = from.TiltDegrees;
            target.DeviceID = from.DeviceID;
            target.UseColor = from.UseColor;
            target.UseDepth = from.UseDepth;
            target.UseSkeletalTracking = from.UseSkeletalTracking;
            target.UseAudioStream = from.UseAudioStream;
            target.ColorImageFormat = from.ColorImageFormat;
            target.DepthImageFormat = from.DepthImageFormat;
            target.DepthStreamRange = from.DepthStreamRange;
            target.TransformSmooth = from.TransformSmooth;
            target.SkeletalEngineTransformSmoothParameters = from.SkeletalEngineTransformSmoothParameters;
            target.IsDepthServiceUpdateEnabled = from.IsDepthServiceUpdateEnabled;
            target.IsWebCamServiceUpdateEnabled = from.IsWebCamServiceUpdateEnabled;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_KinectState_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectState();
            global::Microsoft.Robotics.Services.Sensors.Kinect.KinectState from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.KinectState)(transformFrom));
            target.FrameRate = from.FrameRate;
            target.TiltDegrees = from.TiltDegrees;
            target.DeviceID = from.DeviceID;
            target.UseColor = from.UseColor;
            target.UseDepth = from.UseDepth;
            target.UseSkeletalTracking = from.UseSkeletalTracking;
            target.UseAudioStream = from.UseAudioStream;
            target.ColorImageFormat = from.ColorImageFormat;
            target.DepthImageFormat = from.DepthImageFormat;
            target.DepthStreamRange = from.DepthStreamRange;
            target.TransformSmooth = from.TransformSmooth;
            target.SkeletalEngineTransformSmoothParameters = from.SkeletalEngineTransformSmoothParameters;
            target.IsDepthServiceUpdateEnabled = from.IsDepthServiceUpdateEnabled;
            target.IsWebCamServiceUpdateEnabled = from.IsWebCamServiceUpdateEnabled;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_QueryRawFrameRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_QueryRawFrameRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.QueryRawFrameRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.QueryRawFrameRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest)(transformFrom));
            target.IncludeDepth = from.IncludeDepth;
            target.IncludeVideo = from.IncludeVideo;
            target.IncludeSkeletons = from.IncludeSkeletons;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_QueryRawFrameRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_QueryRawFrameRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.QueryRawFrameRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.QueryRawFrameRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.QueryRawFrameRequest)(transformFrom));
            target.IncludeDepth = from.IncludeDepth;
            target.IncludeVideo = from.IncludeVideo;
            target.IncludeSkeletons = from.IncludeSkeletons;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_GetRawFrameResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_GetRawFrameResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.GetRawFrameResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.GetRawFrameResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse)(transformFrom));
            if ((from.RawFrames != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames tmp = new global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames();
                ((Microsoft.Dss.Core.IDssSerializable)(from.RawFrames)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.RawFrames = tmp;
            }
            else {
                target.RawFrames = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_GetRawFrameResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_GetRawFrameResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetRawFrameResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.GetRawFrameResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.GetRawFrameResponse)(transformFrom));
            global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames tmp = from.RawFrames;
            if ((tmp != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames tmp0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.RawKinectFrames();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.RawFrames = tmp0;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SetFrameRateRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_SetFrameRateRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.SetFrameRateRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.SetFrameRateRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest)(transformFrom));
            target.FrameRate = from.FrameRate;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_SetFrameRateRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SetFrameRateRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SetFrameRateRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.SetFrameRateRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.SetFrameRateRequest)(transformFrom));
            target.FrameRate = from.FrameRate;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_UpdateTiltRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_UpdateTiltRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateTiltRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateTiltRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest)(transformFrom));
            target.Tilt = from.Tilt;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_UpdateTiltRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_UpdateTiltRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateTiltRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateTiltRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateTiltRequest)(transformFrom));
            target.Tilt = from.Tilt;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthToColorRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthToColorRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Depth = from.Depth;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_DepthToColorRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthToColorRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorRequest)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Depth = from.Depth;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthToColorResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthToColorResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_DepthToColorResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthToColorResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthToColorResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.DepthToColorResponse)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToDepthImageRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToDepthImageRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest)(transformFrom));
            target.SkeletonVector = from.SkeletonVector;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToDepthImageRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToDepthImageRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageRequest)(transformFrom));
            target.SkeletonVector = from.SkeletonVector;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToDepthImageResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToDepthImageResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse)(transformFrom));
            target.DepthPoint = from.DepthPoint;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToDepthImageResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToDepthImageResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToDepthImageResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToDepthImageResponse)(transformFrom));
            target.DepthPoint = from.DepthPoint;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToColorImageRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToColorImageRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest)(transformFrom));
            target.SkeletonVector = from.SkeletonVector;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToColorImageRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToColorImageRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageRequest)(transformFrom));
            target.SkeletonVector = from.SkeletonVector;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToColorImageResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToColorImageResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_SkeletonToColorImageResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonToColorImageResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonToColorImageResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonToColorImageResponse)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthImageToSkeletonRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthImageToSkeletonRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Depth = from.Depth;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_DepthImageToSkeletonRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthImageToSkeletonRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonRequest)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Depth = from.Depth;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthImageToSkeletonResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthImageToSkeletonResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse)(transformFrom));
            target.SkeletonVector = from.SkeletonVector;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_DepthImageToSkeletonResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthImageToSkeletonResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthImageToSkeletonResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.DepthImageToSkeletonResponse)(transformFrom));
            target.SkeletonVector = from.SkeletonVector;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_UpdateSkeletalSmoothingRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_UpdateSkeletalSmoothingRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateSkeletalSmoothingRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateSkeletalSmoothingRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest)(transformFrom));
            target.TransfrormSmooth = from.TransfrormSmooth;
            target.SkeletalEngineTransformSmoothParameters = from.SkeletalEngineTransformSmoothParameters;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_UpdateSkeletalSmoothingRequest_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_UpdateSkeletalSmoothingRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.UpdateSkeletalSmoothingRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateSkeletalSmoothingRequest from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.UpdateSkeletalSmoothingRequest)(transformFrom));
            target.TransfrormSmooth = from.TransfrormSmooth;
            target.SkeletalEngineTransformSmoothParameters = from.SkeletalEngineTransformSmoothParameters;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_GetDepthPropertiesResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_GetDepthPropertiesResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.GetDepthPropertiesResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.GetDepthPropertiesResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse)(transformFrom));
            target.MaxDepthValue = from.MaxDepthValue;
            target.MinDepthValue = from.MinDepthValue;
            target.TooFarDepthValue = from.TooFarDepthValue;
            target.TooNearDepthValue = from.TooNearDepthValue;
            target.UnknownDepthValue = from.UnknownDepthValue;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_GetDepthPropertiesResponse_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_GetDepthPropertiesResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.GetDepthPropertiesResponse();
            global::Microsoft.Robotics.Services.Sensors.Kinect.GetDepthPropertiesResponse from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.GetDepthPropertiesResponse)(transformFrom));
            target.MaxDepthValue = from.MaxDepthValue;
            target.MinDepthValue = from.MinDepthValue;
            target.TooFarDepthValue = from.TooFarDepthValue;
            target.TooNearDepthValue = from.TooNearDepthValue;
            target.UnknownDepthValue = from.UnknownDepthValue;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SoundSourceInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_SoundSourceInfo(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.SoundSourceInfo target = new global::Microsoft.Robotics.Services.Sensors.Kinect.SoundSourceInfo();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo)(transformFrom));
            target.CurrentConfidenceLevel = from.CurrentConfidenceLevel;
            target.CurrentAngle = from.CurrentAngle;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_SoundSourceInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SoundSourceInfo(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SoundSourceInfo();
            global::Microsoft.Robotics.Services.Sensors.Kinect.SoundSourceInfo from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.SoundSourceInfo)(transformFrom));
            target.CurrentConfidenceLevel = from.CurrentConfidenceLevel;
            target.CurrentAngle = from.CurrentAngle;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo _cachedInstance0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo();
        
        private static global::Microsoft.Robotics.Services.Sensors.Kinect.KinectFrameInfo _cachedInstance = new global::Microsoft.Robotics.Services.Sensors.Kinect.KinectFrameInfo();
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectFrameInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_KinectFrameInfo(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_KinectFrameInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectFrameInfo(object transformFrom) {
            return _cachedInstance0;
        }
        
        private static global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonDataFrame _cachedInstance2 = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.SkeletonDataFrame();
        
        private static global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonDataFrame _cachedInstance1 = new global::Microsoft.Robotics.Services.Sensors.Kinect.SkeletonDataFrame();
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_SkeletonDataFrame(object transformFrom) {
            return _cachedInstance1;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_SkeletonDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_SkeletonDataFrame(object transformFrom) {
            return _cachedInstance2;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_ColorDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_ColorDataFrame(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.ColorDataFrame target = new global::Microsoft.Robotics.Services.Sensors.Kinect.ColorDataFrame();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.ColorDataFrame from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.ColorDataFrame)(transformFrom));
            if ((from.RawColorFrameInfo != null)) {
                target.RawColorFrameInfo = ((global::Microsoft.Robotics.Services.Sensors.Kinect.KinectFrameInfo)(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectFrameInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_KinectFrameInfo(from.RawColorFrameInfo)));
            }
            else {
                target.RawColorFrameInfo = null;
            }
            if ((from.RawColorFrameData != null)) {
                int count = from.RawColorFrameData.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(from.RawColorFrameData, 0, tmp, 0, global::System.Buffer.ByteLength(from.RawColorFrameData));
                target.RawColorFrameData = tmp;
            }
            else {
                target.RawColorFrameData = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_ColorDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_ColorDataFrame(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.ColorDataFrame target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.ColorDataFrame();
            global::Microsoft.Robotics.Services.Sensors.Kinect.ColorDataFrame from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.ColorDataFrame)(transformFrom));
            global::Microsoft.Robotics.Services.Sensors.Kinect.KinectFrameInfo tmp = from.RawColorFrameInfo;
            if ((tmp != null)) {
                target.RawColorFrameInfo = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo)(Microsoft_Robotics_Services_Sensors_Kinect_KinectFrameInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectFrameInfo(tmp)));
            }
            byte[] tmp0 = from.RawColorFrameData;
            if ((tmp0 != null)) {
                int count = tmp0.Length;
                byte[] tmp1 = new byte[count];
                global::System.Buffer.BlockCopy(tmp0, 0, tmp1, 0, global::System.Buffer.ByteLength(tmp0));
                target.RawColorFrameData = tmp1;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_DepthDataFrame(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthDataFrame target = new global::Microsoft.Robotics.Services.Sensors.Kinect.DepthDataFrame();
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthDataFrame from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthDataFrame)(transformFrom));
            if ((from.RawDepthFrameInfo != null)) {
                target.RawDepthFrameInfo = ((global::Microsoft.Robotics.Services.Sensors.Kinect.KinectFrameInfo)(Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectFrameInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_KinectFrameInfo(from.RawDepthFrameInfo)));
            }
            else {
                target.RawDepthFrameInfo = null;
            }
            if ((from.RawDepthFrameData != null)) {
                int count = from.RawDepthFrameData.Length;
                short[] tmp = new short[count];
                global::System.Buffer.BlockCopy(from.RawDepthFrameData, 0, tmp, 0, global::System.Buffer.ByteLength(from.RawDepthFrameData));
                target.RawDepthFrameData = tmp;
            }
            else {
                target.RawDepthFrameData = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sensors_Kinect_DepthDataFrame_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_DepthDataFrame(object transformFrom) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthDataFrame target = new global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.DepthDataFrame();
            global::Microsoft.Robotics.Services.Sensors.Kinect.DepthDataFrame from = ((global::Microsoft.Robotics.Services.Sensors.Kinect.DepthDataFrame)(transformFrom));
            global::Microsoft.Robotics.Services.Sensors.Kinect.KinectFrameInfo tmp = from.RawDepthFrameInfo;
            if ((tmp != null)) {
                target.RawDepthFrameInfo = ((global::Microsoft.Robotics.Services.Sensors.Kinect.Proxy.KinectFrameInfo)(Microsoft_Robotics_Services_Sensors_Kinect_KinectFrameInfo_TO_Microsoft_Robotics_Services_Sensors_Kinect_Proxy_KinectFrameInfo(tmp)));
            }
            short[] tmp0 = from.RawDepthFrameData;
            if ((tmp0 != null)) {
                int count = tmp0.Length;
                short[] tmp1 = new short[count];
                global::System.Buffer.BlockCopy(tmp0, 0, tmp1, 0, global::System.Buffer.ByteLength(tmp0));
                target.RawDepthFrameData = tmp1;
            }
            return target;
        }
    }
}
