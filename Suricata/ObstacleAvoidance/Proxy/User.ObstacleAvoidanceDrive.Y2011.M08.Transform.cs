//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.ObstacleAvoidanceDrive.Y2011.M08, Version=0.0.0.0, Culture=neutral, PublicKe" +
    "yToken=e3a6d1d8ea7297f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.ObstacleAvoidanceDriveState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_ObstacleAvoidanceDriveState_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_ObstacleAvoidanceDriveState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_ObstacleAvoidanceDrive_ObstacleAvoidanceDriveState_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_ObstacleAvoidanceDriveState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.PIDController), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_PIDController_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_PIDController));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_ObstacleAvoidanceDrive_PIDController_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_PIDController));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.Partners), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_Partners_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Partners));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Partners), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Partners_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_Partners));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Vector3), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30));
        }
        
        public static object Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_ObstacleAvoidanceDriveState_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_ObstacleAvoidanceDriveState(object transformFrom) {
            global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState target = new global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState();
            global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.ObstacleAvoidanceDriveState from = ((global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.ObstacleAvoidanceDriveState)(transformFrom));
            target.RobotWidth = from.RobotWidth;
            target.MaxPowerPerWheel = from.MaxPowerPerWheel;
            target.MaxPowerDifferenceBetweenWheels = from.MaxPowerDifferenceBetweenWheels;
            target.MinRotationSpeed = from.MinRotationSpeed;
            target.DepthCameraPosition = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.DepthCameraPosition)));
            if ((from.Controller != null)) {
                target.Controller = ((global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController)(Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_PIDController_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_PIDController(from.Controller)));
            }
            else {
                target.Controller = null;
            }
            target.MaxDeltaPower = from.MaxDeltaPower;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_ObstacleAvoidanceDrive_ObstacleAvoidanceDriveState_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_ObstacleAvoidanceDriveState(object transformFrom) {
            global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.ObstacleAvoidanceDriveState target = new global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.ObstacleAvoidanceDriveState();
            global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState from = ((global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState)(transformFrom));
            target.RobotWidth = from.RobotWidth;
            target.MaxPowerPerWheel = from.MaxPowerPerWheel;
            target.MaxPowerDifferenceBetweenWheels = from.MaxPowerDifferenceBetweenWheels;
            target.MinRotationSpeed = from.MinRotationSpeed;
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.DepthCameraPosition;
            target.DepthCameraPosition = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController tmp0 = from.Controller;
            if ((tmp0 != null)) {
                target.Controller = ((global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.PIDController)(Microsoft_Robotics_Services_ObstacleAvoidanceDrive_PIDController_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_PIDController(tmp0)));
            }
            target.MaxDeltaPower = from.MaxDeltaPower;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_PIDController_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_PIDController(object transformFrom) {
            global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController target = new global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController();
            global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.PIDController from = ((global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.PIDController)(transformFrom));
            target.Ki = from.Ki;
            target.Kp = from.Kp;
            target.Kd = from.Kd;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_ObstacleAvoidanceDrive_PIDController_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_PIDController(object transformFrom) {
            global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.PIDController target = new global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.PIDController();
            global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController from = ((global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController)(transformFrom));
            target.Ki = from.Ki;
            target.Kp = from.Kp;
            target.Kd = from.Kd;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.Partners _cachedInstance0 = new global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Proxy.Partners();
        
        private static global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Partners _cachedInstance = new global::Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Partners();
        
        public static object Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_Partners_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Partners(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Partners_TO_Microsoft_Robotics_Services_ObstacleAvoidanceDrive_Proxy_Partners(object transformFrom) {
            return _cachedInstance0;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Vector3 target = new global::Microsoft.Robotics.PhysicalModel.Vector3();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3();
            global::Microsoft.Robotics.PhysicalModel.Vector3 from = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            return target;
        }
    }
}
