//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.GameController.Y2006.M09, Version=0.0.0.0, Culture=neutral, PublicKeyToken=e" +
    "3a6d1d8ea7297f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.GameController.Proxy {
    
    
    /// <summary>
    ///            The state of the game controller.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="GameControllerState")]
    [global::System.ComponentModel.DescriptionAttribute("The state of the game controller.")]
    public class GameControllerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public GameControllerState() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Indicates the time (in ms) of the last input reading of the Game Controller service.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time (in ms) of the last input reading of the Game Controller servi" +
            "ce.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.GameController.Proxy.Controller _Controller = new global::Microsoft.Robotics.Services.GameController.Proxy.Controller();
        
        /// <summary>
        ///            Specifies the current controller used by this instance of the Game Controller service.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the current controller used by this instance of the Game Controller ser" +
            "vice.")]
        public global::Microsoft.Robotics.Services.GameController.Proxy.Controller Controller {
            get {
                return this._Controller;
            }
            set {
                this._Controller = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.GameController.Proxy.Axes _Axes = new global::Microsoft.Robotics.Services.GameController.Proxy.Axes();
        
        /// <summary>
        ///            Identifies the axes of the controller.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the axes of the controller.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.GameController.Proxy.Axes Axes {
            get {
                return this._Axes;
            }
            set {
                this._Axes = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.GameController.Proxy.Buttons _Buttons = new global::Microsoft.Robotics.Services.GameController.Proxy.Buttons();
        
        /// <summary>
        ///            Identifies the buttons of the controller.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the buttons of the controller.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.GameController.Proxy.Buttons Buttons {
            get {
                return this._Buttons;
            }
            set {
                this._Buttons = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.GameController.Proxy.Sliders _Sliders = new global::Microsoft.Robotics.Services.GameController.Proxy.Sliders();
        
        /// <summary>
        ///            Identifies the sliders of the controller.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the sliders of the controller.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.GameController.Proxy.Sliders Sliders {
            get {
                return this._Sliders;
            }
            set {
                this._Sliders = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.GameController.Proxy.PovHats _PovHats = new global::Microsoft.Robotics.Services.GameController.Proxy.PovHats();
        
        /// <summary>
        ///            Identifies the directional or Point-Of-View (POV) hats controllers.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the directional or Point-Of-View (POV) hats controllers.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.GameController.Proxy.PovHats PovHats {
            get {
                return this._PovHats;
            }
            set {
                this._PovHats = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current GameControllerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState typedTarget = ((global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            if ((this._Controller != null)) {
                global::Microsoft.Robotics.Services.GameController.Proxy.Controller tmp = new global::Microsoft.Robotics.Services.GameController.Proxy.Controller();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Controller)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Controller = tmp;
            }
            if ((this._Axes != null)) {
                global::Microsoft.Robotics.Services.GameController.Proxy.Axes tmp0 = new global::Microsoft.Robotics.Services.GameController.Proxy.Axes();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Axes)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._Axes = tmp0;
            }
            if ((this._Buttons != null)) {
                global::Microsoft.Robotics.Services.GameController.Proxy.Buttons tmp1 = new global::Microsoft.Robotics.Services.GameController.Proxy.Buttons();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._Buttons = tmp1;
            }
            if ((this._Sliders != null)) {
                global::Microsoft.Robotics.Services.GameController.Proxy.Sliders tmp2 = new global::Microsoft.Robotics.Services.GameController.Proxy.Sliders();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Sliders)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._Sliders = tmp2;
            }
            if ((this._PovHats != null)) {
                global::Microsoft.Robotics.Services.GameController.Proxy.PovHats tmp3 = new global::Microsoft.Robotics.Services.GameController.Proxy.PovHats();
                ((Microsoft.Dss.Core.IDssSerializable)(this._PovHats)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                typedTarget._PovHats = tmp3;
            }
        }
        
        /// <summary>
        ///Clones GameControllerState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState target0 = new global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GameControllerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._Controller == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Controller)).Serialize(writer);
            }
            if ((this._Axes == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Axes)).Serialize(writer);
            }
            if ((this._Buttons == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons)).Serialize(writer);
            }
            if ((this._Sliders == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Sliders)).Serialize(writer);
            }
            if ((this._PovHats == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._PovHats)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes GameControllerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GameControllerState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                this._Controller = ((global::Microsoft.Robotics.Services.GameController.Proxy.Controller)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.GameController.Proxy.Controller())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Axes = ((global::Microsoft.Robotics.Services.GameController.Proxy.Axes)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.GameController.Proxy.Axes())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Buttons = ((global::Microsoft.Robotics.Services.GameController.Proxy.Buttons)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.GameController.Proxy.Buttons())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Sliders = ((global::Microsoft.Robotics.Services.GameController.Proxy.Sliders)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.GameController.Proxy.Sliders())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._PovHats = ((global::Microsoft.Robotics.Services.GameController.Proxy.PovHats)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.GameController.Proxy.PovHats())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            This class represents a game controller.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="Controller")]
    [global::System.ComponentModel.DescriptionAttribute("This class represents a game controller.")]
    public class Controller : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Controller() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time (in ms) of the input reading for this instance.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time (in ms) of the input reading for this instance.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::System.Guid _Instance;
        
        /// <summary>
        ///            Specifies the unique identifier (GUID) for this instance.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the unique identifier (GUID) for this instance.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.Guid Instance {
            get {
                return this._Instance;
            }
            set {
                this._Instance = value;
            }
        }
        
        private global::System.Guid _Product;
        
        /// <summary>
        ///            Specifies the unique product identifier for this instance.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the unique product identifier for this instance.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.Guid Product {
            get {
                return this._Product;
            }
            set {
                this._Product = value;
            }
        }
        
        private string _InstanceName;
        
        /// <summary>
        ///            Specifies a user friendly name for this instance.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for this instance.")]
        public string InstanceName {
            get {
                return this._InstanceName;
            }
            set {
                this._InstanceName = value;
            }
        }
        
        private string _ProductName;
        
        /// <summary>
        ///            Specifies a user friendly product name for this instance.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly product name for this instance.")]
        public string ProductName {
            get {
                return this._ProductName;
            }
            set {
                this._ProductName = value;
            }
        }
        
        private bool _Current;
        
        /// <summary>
        ///            Specifies if this is the current controller.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies if this is the current controller.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Current {
            get {
                return this._Current;
            }
            set {
                this._Current = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Controller to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.GameController.Proxy.Controller typedTarget = ((global::Microsoft.Robotics.Services.GameController.Proxy.Controller)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._Instance = this._Instance;
            typedTarget._Product = this._Product;
            typedTarget._InstanceName = this._InstanceName;
            typedTarget._ProductName = this._ProductName;
            typedTarget._Current = this._Current;
        }
        
        /// <summary>
        ///Clones Controller
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.GameController.Proxy.Controller target0 = new global::Microsoft.Robotics.Services.GameController.Proxy.Controller();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Controller to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._Instance);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._Product);
            if ((this._InstanceName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._InstanceName);
            }
            if ((this._ProductName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ProductName);
            }
            writer.Write(this._Current);
        }
        
        /// <summary>
        ///Deserializes Controller
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Controller</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._Instance = ((global::System.Guid)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::System.Guid))));
            this._Product = ((global::System.Guid)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::System.Guid))));
            if ((reader.ReadByte() != 0)) {
                this._InstanceName = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._ProductName = reader.ReadString();
            }
            this._Current = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies the controller axes.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="Axes")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the controller axes.")]
    public class Axes : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Axes() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time (in ms) of the reading.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time (in ms) of the reading.")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private int _X;
        
        /// <summary>
        ///            Identifies the horizontal (X) axis value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the horizontal (X) axis value.")]
        public int X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private int _Y;
        
        /// <summary>
        ///            Identifies the vertical (Y) axis value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the vertical (Y) axis value.")]
        public int Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private int _Z;
        
        /// <summary>
        ///            Identifies the Z-axis value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Z-axis value.")]
        public int Z {
            get {
                return this._Z;
            }
            set {
                this._Z = value;
            }
        }
        
        private int _Rx;
        
        /// <summary>
        ///            Identifies horizontal (X) axis rotation value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies horizontal (X) axis rotation value.")]
        public int Rx {
            get {
                return this._Rx;
            }
            set {
                this._Rx = value;
            }
        }
        
        private int _Ry;
        
        /// <summary>
        ///            Identifies vertical (Y) axis rotation value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies vertical (Y) axis rotation value.")]
        public int Ry {
            get {
                return this._Ry;
            }
            set {
                this._Ry = value;
            }
        }
        
        private int _Rz;
        
        /// <summary>
        ///            Identifies z-axis rotation value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies z-axis rotation value.")]
        public int Rz {
            get {
                return this._Rz;
            }
            set {
                this._Rz = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Axes to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.GameController.Proxy.Axes typedTarget = ((global::Microsoft.Robotics.Services.GameController.Proxy.Axes)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._X = this._X;
            typedTarget._Y = this._Y;
            typedTarget._Z = this._Z;
            typedTarget._Rx = this._Rx;
            typedTarget._Ry = this._Ry;
            typedTarget._Rz = this._Rz;
        }
        
        /// <summary>
        ///Clones Axes
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.GameController.Proxy.Axes target0 = new global::Microsoft.Robotics.Services.GameController.Proxy.Axes();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Axes to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            writer.Write(this._X);
            writer.Write(this._Y);
            writer.Write(this._Z);
            writer.Write(this._Rx);
            writer.Write(this._Ry);
            writer.Write(this._Rz);
        }
        
        /// <summary>
        ///Deserializes Axes
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Axes</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._X = reader.ReadInt32();
            this._Y = reader.ReadInt32();
            this._Z = reader.ReadInt32();
            this._Rx = reader.ReadInt32();
            this._Ry = reader.ReadInt32();
            this._Rz = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies the controller buttons.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="Buttons")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the controller buttons.")]
    public class Buttons : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Buttons() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time (in ms) of the reading.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time (in ms) of the reading.")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::System.Collections.Generic.List<bool> _Pressed = new global::System.Collections.Generic.List<bool>();
        
        /// <summary>
        ///            Identifies the pressed state of the set of buttons.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the pressed state of the set of buttons.")]
        public global::System.Collections.Generic.List<bool> Pressed {
            get {
                return this._Pressed;
            }
            set {
                this._Pressed = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Buttons to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.GameController.Proxy.Buttons typedTarget = ((global::Microsoft.Robotics.Services.GameController.Proxy.Buttons)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            if ((this._Pressed != null)) {
                int count = this._Pressed.Count;
                global::System.Collections.Generic.List<bool> tmp = new global::System.Collections.Generic.List<bool>(count);
                tmp.AddRange(this._Pressed);
                typedTarget._Pressed = tmp;
            }
        }
        
        /// <summary>
        ///Clones Buttons
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.GameController.Proxy.Buttons target0 = new global::Microsoft.Robotics.Services.GameController.Proxy.Buttons();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Buttons to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._Pressed == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Pressed.Count);
                for (int indexPressed = 0; (indexPressed < this._Pressed.Count); indexPressed = (indexPressed + 1)) {
                    writer.Write(this._Pressed[indexPressed]);
                }
            }
        }
        
        /// <summary>
        ///Deserializes Buttons
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Buttons</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Pressed = new global::System.Collections.Generic.List<bool>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._Pressed.Add(default(bool));
                    this._Pressed[index] = reader.ReadBoolean();
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies the controller sliders.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="Sliders")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the controller sliders.")]
    public class Sliders : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Sliders() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time (in ms) of the current reading.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time (in ms) of the current reading.")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::System.Collections.Generic.List<int> _Position = new global::System.Collections.Generic.List<int>();
        
        /// <summary>
        ///            Identifies the set of position values of the sliders.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the set of position values of the sliders.")]
        public global::System.Collections.Generic.List<int> Position {
            get {
                return this._Position;
            }
            set {
                this._Position = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Sliders to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.GameController.Proxy.Sliders typedTarget = ((global::Microsoft.Robotics.Services.GameController.Proxy.Sliders)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            if ((this._Position != null)) {
                int count = this._Position.Count;
                global::System.Collections.Generic.List<int> tmp = new global::System.Collections.Generic.List<int>(count);
                tmp.AddRange(this._Position);
                typedTarget._Position = tmp;
            }
        }
        
        /// <summary>
        ///Clones Sliders
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.GameController.Proxy.Sliders target0 = new global::Microsoft.Robotics.Services.GameController.Proxy.Sliders();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Sliders to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._Position == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Position.Count);
                for (int indexPosition = 0; (indexPosition < this._Position.Count); indexPosition = (indexPosition + 1)) {
                    writer.Write(this._Position[indexPosition]);
                }
            }
        }
        
        /// <summary>
        ///Deserializes Sliders
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Sliders</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Position = new global::System.Collections.Generic.List<int>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._Position.Add(default(int));
                    this._Position[index] = reader.ReadInt32();
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies the current value of the directional or Point-Of-View (POV) hat controls.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="PovHats")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the current value of the directional or Point-Of-View (POV) hat contro" +
        "ls.")]
    public class PovHats : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PovHats() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time (in ms) of the reading.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time (in ms) of the reading.")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::System.Collections.Generic.List<int> _Direction = new global::System.Collections.Generic.List<int>();
        
        /// <summary>
        ///            Identifies the set of directional values of the control.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the set of directional values of the control.")]
        public global::System.Collections.Generic.List<int> Direction {
            get {
                return this._Direction;
            }
            set {
                this._Direction = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PovHats to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.GameController.Proxy.PovHats typedTarget = ((global::Microsoft.Robotics.Services.GameController.Proxy.PovHats)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            if ((this._Direction != null)) {
                int count = this._Direction.Count;
                global::System.Collections.Generic.List<int> tmp = new global::System.Collections.Generic.List<int>(count);
                tmp.AddRange(this._Direction);
                typedTarget._Direction = tmp;
            }
        }
        
        /// <summary>
        ///Clones PovHats
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.GameController.Proxy.PovHats target0 = new global::Microsoft.Robotics.Services.GameController.Proxy.PovHats();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PovHats to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._Direction == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Direction.Count);
                for (int indexDirection = 0; (indexDirection < this._Direction.Count); indexDirection = (indexDirection + 1)) {
                    writer.Write(this._Direction[indexDirection]);
                }
            }
        }
        
        /// <summary>
        ///Deserializes PovHats
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PovHats</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Direction = new global::System.Collections.Generic.List<int>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._Direction.Add(default(int));
                    this._Direction[index] = reader.ReadInt32();
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Requests the service to update the controller state.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="PollRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Requests the service to update the controller state.")]
    public class PollRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PollRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current PollRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest typedTarget = ((global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest)(target));
        }
        
        /// <summary>
        ///Clones PollRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest target0 = new global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PollRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes PollRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PollRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Requests the service to return information about all controllers
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="GetControllersRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Requests the service to return information about all controllers")]
    public class GetControllersRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public GetControllersRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current GetControllersRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest typedTarget = ((global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest)(target));
        }
        
        /// <summary>
        ///Clones GetControllersRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest target0 = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GetControllersRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes GetControllersRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GetControllersRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Contains information about the controllers.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="GetControllersResponse")]
    [global::System.ComponentModel.DescriptionAttribute("Contains information about the controllers.")]
    public class GetControllersResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public GetControllersResponse() {
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.GameController.Proxy.Controller> _Controllers = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.GameController.Proxy.Controller>();
        
        /// <summary>
        ///            Identifies the set of controllers.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the set of controllers.")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.GameController.Proxy.Controller> Controllers {
            get {
                return this._Controllers;
            }
            set {
                this._Controllers = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current GetControllersResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersResponse typedTarget = ((global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersResponse)(target));
            if ((this._Controllers != null)) {
                int count = this._Controllers.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.GameController.Proxy.Controller> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.GameController.Proxy.Controller>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.GameController.Proxy.Controller tmp0 = default(global::Microsoft.Robotics.Services.GameController.Proxy.Controller);
                    if ((this._Controllers[index] != null)) {
                        global::Microsoft.Robotics.Services.GameController.Proxy.Controller tmp1 = new global::Microsoft.Robotics.Services.GameController.Proxy.Controller();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Controllers[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Controllers = tmp;
            }
        }
        
        /// <summary>
        ///Clones GetControllersResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersResponse target0 = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GetControllersResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Controllers == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Controllers.Count);
                for (int indexControllers = 0; (indexControllers < this._Controllers.Count); indexControllers = (indexControllers + 1)) {
                    if ((this._Controllers[indexControllers] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Controllers[indexControllers])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes GetControllersResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GetControllersResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Controllers = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.GameController.Proxy.Controller>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Controllers.Add(default(global::Microsoft.Robotics.Services.GameController.Proxy.Controller));
                    if ((reader.ReadByte() != 0)) {
                        this._Controllers[index0] = ((global::Microsoft.Robotics.Services.GameController.Proxy.Controller)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.GameController.Proxy.Controller())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Gets the current state of the controller.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the controller.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Changes (or indicates a change to) the entire state of the controller.\nThis is sent initially to every connection.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Changes (or indicates a change to) the entire state of the controller.\\nThis is s" +
        "ent initially to every connection.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Polls the controller and updates the state since the controller was last polled.\nThe controller is automatically polled 20 times a second.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Poll")]
    [global::System.ComponentModel.DescriptionAttribute("Polls the controller and updates the state since the controller was last polled.\\" +
        "nThe controller is automatically polled 20 times a second.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Poll : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Poll() {
        }
        
        public Poll(global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest body) : 
                base(body) {
        }
        
        public Poll(global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Changes which game controller is in use.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Changes which game controller is in use.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ChangeController : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.GameController.Proxy.Controller, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ChangeController() {
        }
        
        public ChangeController(global::Microsoft.Robotics.Services.GameController.Proxy.Controller body) : 
                base(body) {
        }
        
        public ChangeController(global::Microsoft.Robotics.Services.GameController.Proxy.Controller body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates when one of the axes is moved.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates when one of the axes is moved.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateAxes : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.GameController.Proxy.Axes, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateAxes() {
        }
        
        public UpdateAxes(global::Microsoft.Robotics.Services.GameController.Proxy.Axes body) : 
                base(body) {
        }
        
        public UpdateAxes(global::Microsoft.Robotics.Services.GameController.Proxy.Axes body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates when one or more buttons is pressed or released.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates when one or more buttons is pressed or released.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateButtons : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.GameController.Proxy.Buttons, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateButtons() {
        }
        
        public UpdateButtons(global::Microsoft.Robotics.Services.GameController.Proxy.Buttons body) : 
                base(body) {
        }
        
        public UpdateButtons(global::Microsoft.Robotics.Services.GameController.Proxy.Buttons body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates when the position of a Point-Of-View (POV) hat switch is changed.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates when the position of a Point-Of-View (POV) hat switch is changed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdatePovHats : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.GameController.Proxy.PovHats, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdatePovHats() {
        }
        
        public UpdatePovHats(global::Microsoft.Robotics.Services.GameController.Proxy.PovHats body) : 
                base(body) {
        }
        
        public UpdatePovHats(global::Microsoft.Robotics.Services.GameController.Proxy.PovHats body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates when the position of a slider is changed.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates when the position of a slider is changed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateSliders : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.GameController.Proxy.Sliders, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateSliders() {
        }
        
        public UpdateSliders(global::Microsoft.Robotics.Services.GameController.Proxy.Sliders body) : 
                base(body) {
        }
        
        public UpdateSliders(global::Microsoft.Robotics.Services.GameController.Proxy.Sliders body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe message that adds another service to the subscriber list so that notifications
    ///            can be sent to that service.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribe message that adds another service to the subscriber list so that notifi" +
        "cations can be sent to that service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Returns a list of attached controllers.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Returns a list of attached controllers.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class GetControllers : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersResponse, global:: W3C.Soap.Fault>> {
        
        public GetControllers() {
        }
        
        public GetControllers(global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest body) : 
                base(body) {
        }
        
        public GetControllers(global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            The operations supported by this service.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("The operations supported by this service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class GameControllerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.GameController.Proxy.Get, global:: Microsoft.Robotics.Services.GameController.Proxy.Replace, global:: Microsoft.Robotics.Services.GameController.Proxy.Poll, global:: Microsoft.Robotics.Services.GameController.Proxy.ChangeController, global:: Microsoft.Robotics.Services.GameController.Proxy.UpdateAxes, global:: Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons, global:: Microsoft.Robotics.Services.GameController.Proxy.UpdatePovHats, global:: Microsoft.Robotics.Services.GameController.Proxy.UpdateSliders, global:: Microsoft.Robotics.Services.GameController.Proxy.Subscribe, global:: Microsoft.Robotics.Services.GameController.Proxy.GetControllers> {
        
        public GameControllerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.GameController.Proxy.Get operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.GameController.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.Get operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.GameController.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState body = new global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState();
            global::Microsoft.Robotics.Services.GameController.Proxy.Replace operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.GameController.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState body = new global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.Replace operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState body, out global::Microsoft.Robotics.Services.GameController.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerState();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Poll() {
            global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest body = new global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest();
            global::Microsoft.Robotics.Services.GameController.Proxy.Poll operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Poll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Poll(out global::Microsoft.Robotics.Services.GameController.Proxy.Poll operation) {
            global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest body = new global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Poll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Poll(global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.Poll operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Poll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Poll(global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest body, out global::Microsoft.Robotics.Services.GameController.Proxy.Poll operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.PollRequest();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Poll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ChangeController() {
            global::Microsoft.Robotics.Services.GameController.Proxy.Controller body = new global::Microsoft.Robotics.Services.GameController.Proxy.Controller();
            global::Microsoft.Robotics.Services.GameController.Proxy.ChangeController operation = new global::Microsoft.Robotics.Services.GameController.Proxy.ChangeController(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ChangeController(out global::Microsoft.Robotics.Services.GameController.Proxy.ChangeController operation) {
            global::Microsoft.Robotics.Services.GameController.Proxy.Controller body = new global::Microsoft.Robotics.Services.GameController.Proxy.Controller();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.ChangeController(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ChangeController(global::Microsoft.Robotics.Services.GameController.Proxy.Controller body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.Controller();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.ChangeController operation = new global::Microsoft.Robotics.Services.GameController.Proxy.ChangeController(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ChangeController(global::Microsoft.Robotics.Services.GameController.Proxy.Controller body, out global::Microsoft.Robotics.Services.GameController.Proxy.ChangeController operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.Controller();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.ChangeController(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateAxes() {
            global::Microsoft.Robotics.Services.GameController.Proxy.Axes body = new global::Microsoft.Robotics.Services.GameController.Proxy.Axes();
            global::Microsoft.Robotics.Services.GameController.Proxy.UpdateAxes operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateAxes(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateAxes(out global::Microsoft.Robotics.Services.GameController.Proxy.UpdateAxes operation) {
            global::Microsoft.Robotics.Services.GameController.Proxy.Axes body = new global::Microsoft.Robotics.Services.GameController.Proxy.Axes();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateAxes(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateAxes(global::Microsoft.Robotics.Services.GameController.Proxy.Axes body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.Axes();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.UpdateAxes operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateAxes(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateAxes(global::Microsoft.Robotics.Services.GameController.Proxy.Axes body, out global::Microsoft.Robotics.Services.GameController.Proxy.UpdateAxes operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.Axes();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateAxes(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateButtons() {
            global::Microsoft.Robotics.Services.GameController.Proxy.Buttons body = new global::Microsoft.Robotics.Services.GameController.Proxy.Buttons();
            global::Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateButtons(out global::Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons operation) {
            global::Microsoft.Robotics.Services.GameController.Proxy.Buttons body = new global::Microsoft.Robotics.Services.GameController.Proxy.Buttons();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateButtons(global::Microsoft.Robotics.Services.GameController.Proxy.Buttons body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.Buttons();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateButtons(global::Microsoft.Robotics.Services.GameController.Proxy.Buttons body, out global::Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.Buttons();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdatePovHats() {
            global::Microsoft.Robotics.Services.GameController.Proxy.PovHats body = new global::Microsoft.Robotics.Services.GameController.Proxy.PovHats();
            global::Microsoft.Robotics.Services.GameController.Proxy.UpdatePovHats operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdatePovHats(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePovHats(out global::Microsoft.Robotics.Services.GameController.Proxy.UpdatePovHats operation) {
            global::Microsoft.Robotics.Services.GameController.Proxy.PovHats body = new global::Microsoft.Robotics.Services.GameController.Proxy.PovHats();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdatePovHats(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdatePovHats(global::Microsoft.Robotics.Services.GameController.Proxy.PovHats body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.PovHats();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.UpdatePovHats operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdatePovHats(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePovHats(global::Microsoft.Robotics.Services.GameController.Proxy.PovHats body, out global::Microsoft.Robotics.Services.GameController.Proxy.UpdatePovHats operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.PovHats();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdatePovHats(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateSliders() {
            global::Microsoft.Robotics.Services.GameController.Proxy.Sliders body = new global::Microsoft.Robotics.Services.GameController.Proxy.Sliders();
            global::Microsoft.Robotics.Services.GameController.Proxy.UpdateSliders operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateSliders(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateSliders(out global::Microsoft.Robotics.Services.GameController.Proxy.UpdateSliders operation) {
            global::Microsoft.Robotics.Services.GameController.Proxy.Sliders body = new global::Microsoft.Robotics.Services.GameController.Proxy.Sliders();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateSliders(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateSliders(global::Microsoft.Robotics.Services.GameController.Proxy.Sliders body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.Sliders();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.UpdateSliders operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateSliders(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateSliders(global::Microsoft.Robotics.Services.GameController.Proxy.Sliders body, out global::Microsoft.Robotics.Services.GameController.Proxy.UpdateSliders operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.Sliders();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.UpdateSliders(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.GameController.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.GameController.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.GameController.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersResponse, global:: W3C.Soap.Fault> GetControllers() {
            global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest body = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest();
            global::Microsoft.Robotics.Services.GameController.Proxy.GetControllers operation = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetControllers(out global::Microsoft.Robotics.Services.GameController.Proxy.GetControllers operation) {
            global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest body = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest();
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersResponse, global:: W3C.Soap.Fault> GetControllers(global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest();
            }
            global::Microsoft.Robotics.Services.GameController.Proxy.GetControllers operation = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetControllers(global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest body, out global::Microsoft.Robotics.Services.GameController.Proxy.GetControllers operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllersRequest();
            }
            operation = new global::Microsoft.Robotics.Services.GameController.Proxy.GetControllers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Identifies groups of controller state.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", ElementName="Substate")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies groups of controller state.")]
    [global::System.FlagsAttribute()]
    public enum Substate : int {
        
        /// <summary>
        ///            No controller state group specified
        ///            </summary>
        None = 0,
        
        /// <summary>
        ///            Controller state
        ///            </summary>
        Controller = 1,
        
        /// <summary>
        ///            Thumbstick state
        ///            </summary>
        Axes = 2,
        
        /// <summary>
        ///            Button state
        ///            </summary>
        Buttons = 4,
        
        /// <summary>
        ///            Slider state
        ///            </summary>
        Sliders = 8,
        
        /// <summary>
        ///            The directional or Point-Of-View (POV) hats state
        ///            </summary>
        PovHats = 16,
    }
    
    /// <summary>
    ///            Provides access to a DirectInput game controller such as a joystick or gamepad.
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to a DirectInput game controller such as a joystick or gamepad.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Game Controller")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.GameControllerOperations = new global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.GameControllerOperations, "http://schemas.microsoft.com/robotics/2006/09/gamecontroller.user.html", "GameControllerOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.GameController.Proxy.GameControllerOperations GameControllerOperations;
    }
}
