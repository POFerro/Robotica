//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("Arduino")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("Arduino")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="Arduino.Y2012.M01, Version=1.0.0.0, Culture=neutral, PublicKeyToken=e3a6d1d8ea729" +
    "7f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Arduino.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html", ElementName="ArduinoState")]
    public class ArduinoState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ArduinoState() {
        }
        
        private global::Arduino.Proxy.ArduinoState.ConnectionTypes _ConnectionType;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Proxy.ArduinoState.ConnectionTypes ConnectionType {
            get {
                return this._ConnectionType;
            }
            set {
                this._ConnectionType = value;
            }
        }
        
        private int _ComPort;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int ComPort {
            get {
                return this._ComPort;
            }
            set {
                this._ComPort = value;
            }
        }
        
        private int _ComPortRate;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int ComPortRate {
            get {
                return this._ComPortRate;
            }
            set {
                this._ComPortRate = value;
            }
        }
        
        private global::Arduino.Proxy.PinConfigurationCollection _PinsConfiguration;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Proxy.PinConfigurationCollection PinsConfiguration {
            get {
                return this._PinsConfiguration;
            }
            set {
                this._PinsConfiguration = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Proxy.Pins> _PinsReporting;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Proxy.Pins> PinsReporting {
            get {
                return this._PinsReporting;
            }
            set {
                this._PinsReporting = value;
            }
        }
        
        private int _SamplingInterval;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int SamplingInterval {
            get {
                return this._SamplingInterval;
            }
            set {
                this._SamplingInterval = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ArduinoState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Proxy.ArduinoState typedTarget = ((global::Arduino.Proxy.ArduinoState)(target));
            typedTarget._ConnectionType = this._ConnectionType;
            typedTarget._ComPort = this._ComPort;
            typedTarget._ComPortRate = this._ComPortRate;
            if ((this._PinsConfiguration != null)) {
                global::Arduino.Proxy.PinConfigurationCollection tmp = new global::Arduino.Proxy.PinConfigurationCollection();
                ((Microsoft.Dss.Core.IDssSerializable)(this._PinsConfiguration)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._PinsConfiguration = tmp;
            }
            if ((this._PinsReporting != null)) {
                int count = this._PinsReporting.Count;
                global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Proxy.Pins> tmp0 = new global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Proxy.Pins>(count);
                tmp0.AddRange(this._PinsReporting);
                typedTarget._PinsReporting = tmp0;
            }
            typedTarget._SamplingInterval = this._SamplingInterval;
        }
        
        /// <summary>
        ///Clones ArduinoState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Proxy.ArduinoState target0 = new global::Arduino.Proxy.ArduinoState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ArduinoState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._ConnectionType)));
            writer.Write(this._ComPort);
            writer.Write(this._ComPortRate);
            if ((this._PinsConfiguration == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._PinsConfiguration)).Serialize(writer);
            }
            if ((this._PinsReporting == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._PinsReporting.Count);
                for (int indexPinsReporting = 0; (indexPinsReporting < this._PinsReporting.Count); indexPinsReporting = (indexPinsReporting + 1)) {
                    writer.Write(((int)(this._PinsReporting[indexPinsReporting])));
                }
            }
            writer.Write(this._SamplingInterval);
        }
        
        /// <summary>
        ///Deserializes ArduinoState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ArduinoState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._ConnectionType = ((global::Arduino.Proxy.ArduinoState.ConnectionTypes)(reader.ReadInt32()));
            this._ComPort = reader.ReadInt32();
            this._ComPortRate = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._PinsConfiguration = ((global::Arduino.Proxy.PinConfigurationCollection)(((Microsoft.Dss.Core.IDssSerializable)(new global::Arduino.Proxy.PinConfigurationCollection())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._PinsReporting = new global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Proxy.Pins>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._PinsReporting.Add(default(global::Arduino.Firmata.Types.Proxy.Pins));
                    this._PinsReporting[index] = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
                }
            }
            this._SamplingInterval = reader.ReadInt32();
            return this;
        }
        
        [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html")]
        [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html", ElementName="ConnectionTypes")]
        public enum ConnectionTypes : int {
            
            None = 0,
            
            SerialPort = 1,
            
            TCPIP = 2,
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html", ElementName="PinConfigurationCollection")]
    public class PinConfigurationCollection : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PinConfigurationCollection() {
        }
        
        private Arduino.Proxy.PinConfigurationAnalogOutput[] _Analog;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public Arduino.Proxy.PinConfigurationAnalogOutput[] Analog {
            get {
                return this._Analog;
            }
            set {
                this._Analog = value;
            }
        }
        
        private Arduino.Proxy.PinConfigurationDigitalPort[] _Digital;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public Arduino.Proxy.PinConfigurationDigitalPort[] Digital {
            get {
                return this._Digital;
            }
            set {
                this._Digital = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PinConfigurationCollection to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Proxy.PinConfigurationCollection typedTarget = ((global::Arduino.Proxy.PinConfigurationCollection)(target));
            if ((this._Analog != null)) {
                int count = this._Analog.Length;
                global::Arduino.Proxy.PinConfigurationAnalogOutput[] tmp = new global::Arduino.Proxy.PinConfigurationAnalogOutput[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Arduino.Proxy.PinConfigurationAnalogOutput tmp0 = default(global::Arduino.Proxy.PinConfigurationAnalogOutput);
                    if ((this._Analog[index] != null)) {
                        global::Arduino.Proxy.PinConfigurationAnalogOutput tmp1 = new global::Arduino.Proxy.PinConfigurationAnalogOutput();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Analog[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp[index] = tmp0;
                }
                typedTarget._Analog = tmp;
            }
            if ((this._Digital != null)) {
                int count0 = this._Digital.Length;
                global::Arduino.Proxy.PinConfigurationDigitalPort[] tmp2 = new global::Arduino.Proxy.PinConfigurationDigitalPort[count0];
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Arduino.Proxy.PinConfigurationDigitalPort tmp3 = default(global::Arduino.Proxy.PinConfigurationDigitalPort);
                    if ((this._Digital[index0] != null)) {
                        global::Arduino.Proxy.PinConfigurationDigitalPort tmp4 = new global::Arduino.Proxy.PinConfigurationDigitalPort();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Digital[index0])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                        tmp3 = tmp4;
                    }
                    tmp2[index0] = tmp3;
                }
                typedTarget._Digital = tmp2;
            }
        }
        
        /// <summary>
        ///Clones PinConfigurationCollection
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Proxy.PinConfigurationCollection target0 = new global::Arduino.Proxy.PinConfigurationCollection();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PinConfigurationCollection to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Analog == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Analog.Length);
                for (int indexAnalog = 0; (indexAnalog < this._Analog.Length); indexAnalog = (indexAnalog + 1)) {
                    if ((this._Analog[indexAnalog] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Analog[indexAnalog])).Serialize(writer);
                    }
                }
            }
            if ((this._Digital == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Digital.Length);
                for (int indexDigital = 0; (indexDigital < this._Digital.Length); indexDigital = (indexDigital + 1)) {
                    if ((this._Digital[indexDigital] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Digital[indexDigital])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes PinConfigurationCollection
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PinConfigurationCollection</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int tmp5 = reader.ReadInt32();
                int count1 = reader.ReadInt32();
                this._Analog = new global::Arduino.Proxy.PinConfigurationAnalogOutput[count1];
                for (int index1 = 0; (index1 < count1); index1 = (index1 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Analog[index1] = ((global::Arduino.Proxy.PinConfigurationAnalogOutput)(((Microsoft.Dss.Core.IDssSerializable)(new global::Arduino.Proxy.PinConfigurationAnalogOutput())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                int tmp6 = reader.ReadInt32();
                int count2 = reader.ReadInt32();
                this._Digital = new global::Arduino.Proxy.PinConfigurationDigitalPort[count2];
                for (int index2 = 0; (index2 < count2); index2 = (index2 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Digital[index2] = ((global::Arduino.Proxy.PinConfigurationDigitalPort)(((Microsoft.Dss.Core.IDssSerializable)(new global::Arduino.Proxy.PinConfigurationDigitalPort())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html", ElementName="PinConfigurationAnalogOutput")]
    public class PinConfigurationAnalogOutput : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PinConfigurationAnalogOutput() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _Pin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins Pin {
            get {
                return this._Pin;
            }
            set {
                this._Pin = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PinConfigurationAnalogOutput to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Proxy.PinConfigurationAnalogOutput typedTarget = ((global::Arduino.Proxy.PinConfigurationAnalogOutput)(target));
            typedTarget._Pin = this._Pin;
        }
        
        /// <summary>
        ///Clones PinConfigurationAnalogOutput
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Proxy.PinConfigurationAnalogOutput target0 = new global::Arduino.Proxy.PinConfigurationAnalogOutput();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PinConfigurationAnalogOutput to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Pin)));
        }
        
        /// <summary>
        ///Deserializes PinConfigurationAnalogOutput
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PinConfigurationAnalogOutput</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://mrdsarduino.codeplex.com/2012/01/arduino.html", ElementName="PinConfigurationDigitalPort")]
    public class PinConfigurationDigitalPort : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PinConfigurationDigitalPort() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _Pin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins Pin {
            get {
                return this._Pin;
            }
            set {
                this._Pin = value;
            }
        }
        
        private global::Arduino.Firmata.Types.Proxy.PinMode _Mode;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.PinMode Mode {
            get {
                return this._Mode;
            }
            set {
                this._Mode = value;
            }
        }
        
        private global::Arduino.Firmata.Types.Proxy.PinDigitalValue _OUTPUTInitialValue;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.PinDigitalValue OUTPUTInitialValue {
            get {
                return this._OUTPUTInitialValue;
            }
            set {
                this._OUTPUTInitialValue = value;
            }
        }
        
        private byte _PWMInitialValue;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte PWMInitialValue {
            get {
                return this._PWMInitialValue;
            }
            set {
                this._PWMInitialValue = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PinConfigurationDigitalPort to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Proxy.PinConfigurationDigitalPort typedTarget = ((global::Arduino.Proxy.PinConfigurationDigitalPort)(target));
            typedTarget._Pin = this._Pin;
            typedTarget._Mode = this._Mode;
            typedTarget._OUTPUTInitialValue = this._OUTPUTInitialValue;
            typedTarget._PWMInitialValue = this._PWMInitialValue;
        }
        
        /// <summary>
        ///Clones PinConfigurationDigitalPort
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Proxy.PinConfigurationDigitalPort target0 = new global::Arduino.Proxy.PinConfigurationDigitalPort();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PinConfigurationDigitalPort to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Pin)));
            writer.Write(((int)(this._Mode)));
            writer.Write(((int)(this._OUTPUTInitialValue)));
            writer.Write(this._PWMInitialValue);
        }
        
        /// <summary>
        ///Deserializes PinConfigurationDigitalPort
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PinConfigurationDigitalPort</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._Mode = ((global::Arduino.Firmata.Types.Proxy.PinMode)(reader.ReadInt32()));
            this._OUTPUTInitialValue = ((global::Arduino.Firmata.Types.Proxy.PinDigitalValue)(reader.ReadInt32()));
            this._PWMInitialValue = reader.ReadByte();
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Arduino.Proxy.ArduinoState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Arduino.Proxy.ArduinoState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ArduinoOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Arduino.Proxy.Get, global:: Arduino.Proxy.Subscribe, global:: Arduino.Messages.Proxy.DigitalOutputUpdate, global:: Arduino.Messages.Proxy.AnalogOutputUpdate, global:: Arduino.Messages.Proxy.SetPinMode, global:: Arduino.Messages.Proxy.SetServoMode, global:: Arduino.Messages.Proxy.SetSonarMode, global:: Arduino.Messages.Proxy.SetPortDigitalValue, global:: Arduino.Messages.Proxy.SetPortAnalogValue, global:: Arduino.Messages.Proxy.SetPinReporting> {
        
        public ArduinoOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Arduino.Proxy.ArduinoState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Arduino.Proxy.Get operation = new global::Arduino.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Arduino.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Arduino.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Arduino.Proxy.ArduinoState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Arduino.Proxy.Get operation = new global::Arduino.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Arduino.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Arduino.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Arduino.Proxy.Subscribe operation = new global::Arduino.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Arduino.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Arduino.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Arduino.Proxy.Subscribe operation = new global::Arduino.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Arduino.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Arduino.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DigitalOutputUpdate() {
            global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest body = new global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest();
            global::Arduino.Messages.Proxy.DigitalOutputUpdate operation = new global::Arduino.Messages.Proxy.DigitalOutputUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DigitalOutputUpdate(out global::Arduino.Messages.Proxy.DigitalOutputUpdate operation) {
            global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest body = new global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest();
            operation = new global::Arduino.Messages.Proxy.DigitalOutputUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DigitalOutputUpdate(global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest body) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest();
            }
            global::Arduino.Messages.Proxy.DigitalOutputUpdate operation = new global::Arduino.Messages.Proxy.DigitalOutputUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DigitalOutputUpdate(global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest body, out global::Arduino.Messages.Proxy.DigitalOutputUpdate operation) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest();
            }
            operation = new global::Arduino.Messages.Proxy.DigitalOutputUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> AnalogOutputUpdate() {
            global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest body = new global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest();
            global::Arduino.Messages.Proxy.AnalogOutputUpdate operation = new global::Arduino.Messages.Proxy.AnalogOutputUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AnalogOutputUpdate(out global::Arduino.Messages.Proxy.AnalogOutputUpdate operation) {
            global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest body = new global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest();
            operation = new global::Arduino.Messages.Proxy.AnalogOutputUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> AnalogOutputUpdate(global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest body) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest();
            }
            global::Arduino.Messages.Proxy.AnalogOutputUpdate operation = new global::Arduino.Messages.Proxy.AnalogOutputUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AnalogOutputUpdate(global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest body, out global::Arduino.Messages.Proxy.AnalogOutputUpdate operation) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest();
            }
            operation = new global::Arduino.Messages.Proxy.AnalogOutputUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetPinMode() {
            global::Arduino.Messages.Proxy.SetPinModeRequest body = new global::Arduino.Messages.Proxy.SetPinModeRequest();
            global::Arduino.Messages.Proxy.SetPinMode operation = new global::Arduino.Messages.Proxy.SetPinMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetPinMode(out global::Arduino.Messages.Proxy.SetPinMode operation) {
            global::Arduino.Messages.Proxy.SetPinModeRequest body = new global::Arduino.Messages.Proxy.SetPinModeRequest();
            operation = new global::Arduino.Messages.Proxy.SetPinMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetPinMode(global::Arduino.Messages.Proxy.SetPinModeRequest body) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetPinModeRequest();
            }
            global::Arduino.Messages.Proxy.SetPinMode operation = new global::Arduino.Messages.Proxy.SetPinMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetPinMode(global::Arduino.Messages.Proxy.SetPinModeRequest body, out global::Arduino.Messages.Proxy.SetPinMode operation) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetPinModeRequest();
            }
            operation = new global::Arduino.Messages.Proxy.SetPinMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetServoMode() {
            global::Arduino.Messages.Proxy.SetServoModeRequest body = new global::Arduino.Messages.Proxy.SetServoModeRequest();
            global::Arduino.Messages.Proxy.SetServoMode operation = new global::Arduino.Messages.Proxy.SetServoMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetServoMode(out global::Arduino.Messages.Proxy.SetServoMode operation) {
            global::Arduino.Messages.Proxy.SetServoModeRequest body = new global::Arduino.Messages.Proxy.SetServoModeRequest();
            operation = new global::Arduino.Messages.Proxy.SetServoMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetServoMode(global::Arduino.Messages.Proxy.SetServoModeRequest body) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetServoModeRequest();
            }
            global::Arduino.Messages.Proxy.SetServoMode operation = new global::Arduino.Messages.Proxy.SetServoMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetServoMode(global::Arduino.Messages.Proxy.SetServoModeRequest body, out global::Arduino.Messages.Proxy.SetServoMode operation) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetServoModeRequest();
            }
            operation = new global::Arduino.Messages.Proxy.SetServoMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetSonarMode() {
            global::Arduino.Messages.Proxy.SetSonarModeRequest body = new global::Arduino.Messages.Proxy.SetSonarModeRequest();
            global::Arduino.Messages.Proxy.SetSonarMode operation = new global::Arduino.Messages.Proxy.SetSonarMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetSonarMode(out global::Arduino.Messages.Proxy.SetSonarMode operation) {
            global::Arduino.Messages.Proxy.SetSonarModeRequest body = new global::Arduino.Messages.Proxy.SetSonarModeRequest();
            operation = new global::Arduino.Messages.Proxy.SetSonarMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetSonarMode(global::Arduino.Messages.Proxy.SetSonarModeRequest body) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetSonarModeRequest();
            }
            global::Arduino.Messages.Proxy.SetSonarMode operation = new global::Arduino.Messages.Proxy.SetSonarMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetSonarMode(global::Arduino.Messages.Proxy.SetSonarModeRequest body, out global::Arduino.Messages.Proxy.SetSonarMode operation) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetSonarModeRequest();
            }
            operation = new global::Arduino.Messages.Proxy.SetSonarMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetPortDigitalValue() {
            global::Arduino.Messages.Proxy.SetPortDigitalValueRequest body = new global::Arduino.Messages.Proxy.SetPortDigitalValueRequest();
            global::Arduino.Messages.Proxy.SetPortDigitalValue operation = new global::Arduino.Messages.Proxy.SetPortDigitalValue(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetPortDigitalValue(out global::Arduino.Messages.Proxy.SetPortDigitalValue operation) {
            global::Arduino.Messages.Proxy.SetPortDigitalValueRequest body = new global::Arduino.Messages.Proxy.SetPortDigitalValueRequest();
            operation = new global::Arduino.Messages.Proxy.SetPortDigitalValue(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetPortDigitalValue(global::Arduino.Messages.Proxy.SetPortDigitalValueRequest body) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetPortDigitalValueRequest();
            }
            global::Arduino.Messages.Proxy.SetPortDigitalValue operation = new global::Arduino.Messages.Proxy.SetPortDigitalValue(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetPortDigitalValue(global::Arduino.Messages.Proxy.SetPortDigitalValueRequest body, out global::Arduino.Messages.Proxy.SetPortDigitalValue operation) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetPortDigitalValueRequest();
            }
            operation = new global::Arduino.Messages.Proxy.SetPortDigitalValue(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetPortAnalogValue() {
            global::Arduino.Messages.Proxy.SetPortAnalogValueRequest body = new global::Arduino.Messages.Proxy.SetPortAnalogValueRequest();
            global::Arduino.Messages.Proxy.SetPortAnalogValue operation = new global::Arduino.Messages.Proxy.SetPortAnalogValue(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetPortAnalogValue(out global::Arduino.Messages.Proxy.SetPortAnalogValue operation) {
            global::Arduino.Messages.Proxy.SetPortAnalogValueRequest body = new global::Arduino.Messages.Proxy.SetPortAnalogValueRequest();
            operation = new global::Arduino.Messages.Proxy.SetPortAnalogValue(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetPortAnalogValue(global::Arduino.Messages.Proxy.SetPortAnalogValueRequest body) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetPortAnalogValueRequest();
            }
            global::Arduino.Messages.Proxy.SetPortAnalogValue operation = new global::Arduino.Messages.Proxy.SetPortAnalogValue(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetPortAnalogValue(global::Arduino.Messages.Proxy.SetPortAnalogValueRequest body, out global::Arduino.Messages.Proxy.SetPortAnalogValue operation) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetPortAnalogValueRequest();
            }
            operation = new global::Arduino.Messages.Proxy.SetPortAnalogValue(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetPinReporting() {
            global::Arduino.Messages.Proxy.SetPinReportingRequest body = new global::Arduino.Messages.Proxy.SetPinReportingRequest();
            global::Arduino.Messages.Proxy.SetPinReporting operation = new global::Arduino.Messages.Proxy.SetPinReporting(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetPinReporting(out global::Arduino.Messages.Proxy.SetPinReporting operation) {
            global::Arduino.Messages.Proxy.SetPinReportingRequest body = new global::Arduino.Messages.Proxy.SetPinReportingRequest();
            operation = new global::Arduino.Messages.Proxy.SetPinReporting(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetPinReporting(global::Arduino.Messages.Proxy.SetPinReportingRequest body) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetPinReportingRequest();
            }
            global::Arduino.Messages.Proxy.SetPinReporting operation = new global::Arduino.Messages.Proxy.SetPinReporting(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetPinReporting(global::Arduino.Messages.Proxy.SetPinReportingRequest body, out global::Arduino.Messages.Proxy.SetPinReporting operation) {
            if ((body == null)) {
                body = new global::Arduino.Messages.Proxy.SetPinReportingRequest();
            }
            operation = new global::Arduino.Messages.Proxy.SetPinReporting(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DisplayNameAttribute("Arduino Service")]
    public class Contract {
        
        public const string Identifier = "http://mrdsarduino.codeplex.com/2012/01/arduino.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://mrdsarduino.codeplex.com/2012/01/arduino.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://mrdsarduino.codeplex.com/2012/01/arduino.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ArduinoOperations = new global::Arduino.Proxy.ArduinoOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ArduinoOperations, "http://mrdsarduino.codeplex.com/2012/01/arduino.html", "ArduinoOperations", ""));
        }
        
        public global::Arduino.Proxy.ArduinoOperations ArduinoOperations;
    }
}
namespace Arduino.Messages.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="DigitalOutputUpdateRequest")]
    public class DigitalOutputUpdateRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DigitalOutputUpdateRequest() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _CurrentPin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins CurrentPin {
            get {
                return this._CurrentPin;
            }
            set {
                this._CurrentPin = value;
            }
        }
        
        private global::Arduino.Firmata.Types.Proxy.PinMode _CurrentPinMode;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.PinMode CurrentPinMode {
            get {
                return this._CurrentPinMode;
            }
            set {
                this._CurrentPinMode = value;
            }
        }
        
        private int _Value;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Value {
            get {
                return this._Value;
            }
            set {
                this._Value = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DigitalOutputUpdateRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest typedTarget = ((global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest)(target));
            typedTarget._CurrentPin = this._CurrentPin;
            typedTarget._CurrentPinMode = this._CurrentPinMode;
            typedTarget._Value = this._Value;
        }
        
        /// <summary>
        ///Clones DigitalOutputUpdateRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest target0 = new global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DigitalOutputUpdateRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._CurrentPin)));
            writer.Write(((int)(this._CurrentPinMode)));
            writer.Write(this._Value);
        }
        
        /// <summary>
        ///Deserializes DigitalOutputUpdateRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DigitalOutputUpdateRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._CurrentPin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._CurrentPinMode = ((global::Arduino.Firmata.Types.Proxy.PinMode)(reader.ReadInt32()));
            this._Value = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="AnalogOutputUpdateRequest")]
    public class AnalogOutputUpdateRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AnalogOutputUpdateRequest() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _CurrentPin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins CurrentPin {
            get {
                return this._CurrentPin;
            }
            set {
                this._CurrentPin = value;
            }
        }
        
        private int _Value;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Value {
            get {
                return this._Value;
            }
            set {
                this._Value = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AnalogOutputUpdateRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest typedTarget = ((global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest)(target));
            typedTarget._CurrentPin = this._CurrentPin;
            typedTarget._Value = this._Value;
        }
        
        /// <summary>
        ///Clones AnalogOutputUpdateRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest target0 = new global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AnalogOutputUpdateRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._CurrentPin)));
            writer.Write(this._Value);
        }
        
        /// <summary>
        ///Deserializes AnalogOutputUpdateRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AnalogOutputUpdateRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._CurrentPin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._Value = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="SetPinModeRequest")]
    public class SetPinModeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetPinModeRequest() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _Pin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins Pin {
            get {
                return this._Pin;
            }
            set {
                this._Pin = value;
            }
        }
        
        private global::Arduino.Firmata.Types.Proxy.PinMode _Mode;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.PinMode Mode {
            get {
                return this._Mode;
            }
            set {
                this._Mode = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetPinModeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Messages.Proxy.SetPinModeRequest typedTarget = ((global::Arduino.Messages.Proxy.SetPinModeRequest)(target));
            typedTarget._Pin = this._Pin;
            typedTarget._Mode = this._Mode;
        }
        
        /// <summary>
        ///Clones SetPinModeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Messages.Proxy.SetPinModeRequest target0 = new global::Arduino.Messages.Proxy.SetPinModeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetPinModeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Pin)));
            writer.Write(((int)(this._Mode)));
        }
        
        /// <summary>
        ///Deserializes SetPinModeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetPinModeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._Mode = ((global::Arduino.Firmata.Types.Proxy.PinMode)(reader.ReadInt32()));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="SetServoModeRequest")]
    public class SetServoModeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetServoModeRequest() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _Pin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins Pin {
            get {
                return this._Pin;
            }
            set {
                this._Pin = value;
            }
        }
        
        private int _MinPulse;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int MinPulse {
            get {
                return this._MinPulse;
            }
            set {
                this._MinPulse = value;
            }
        }
        
        private int _MaxPulse;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int MaxPulse {
            get {
                return this._MaxPulse;
            }
            set {
                this._MaxPulse = value;
            }
        }
        
        private int _StartAngle;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int StartAngle {
            get {
                return this._StartAngle;
            }
            set {
                this._StartAngle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetServoModeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Messages.Proxy.SetServoModeRequest typedTarget = ((global::Arduino.Messages.Proxy.SetServoModeRequest)(target));
            typedTarget._Pin = this._Pin;
            typedTarget._MinPulse = this._MinPulse;
            typedTarget._MaxPulse = this._MaxPulse;
            typedTarget._StartAngle = this._StartAngle;
        }
        
        /// <summary>
        ///Clones SetServoModeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Messages.Proxy.SetServoModeRequest target0 = new global::Arduino.Messages.Proxy.SetServoModeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetServoModeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Pin)));
            writer.Write(this._MinPulse);
            writer.Write(this._MaxPulse);
            writer.Write(this._StartAngle);
        }
        
        /// <summary>
        ///Deserializes SetServoModeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetServoModeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._MinPulse = reader.ReadInt32();
            this._MaxPulse = reader.ReadInt32();
            this._StartAngle = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="SetSonarModeRequest")]
    public class SetSonarModeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetSonarModeRequest() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _TriggerPin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins TriggerPin {
            get {
                return this._TriggerPin;
            }
            set {
                this._TriggerPin = value;
            }
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _EchoPin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins EchoPin {
            get {
                return this._EchoPin;
            }
            set {
                this._EchoPin = value;
            }
        }
        
        private int _MaxDistance;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int MaxDistance {
            get {
                return this._MaxDistance;
            }
            set {
                this._MaxDistance = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetSonarModeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Messages.Proxy.SetSonarModeRequest typedTarget = ((global::Arduino.Messages.Proxy.SetSonarModeRequest)(target));
            typedTarget._TriggerPin = this._TriggerPin;
            typedTarget._EchoPin = this._EchoPin;
            typedTarget._MaxDistance = this._MaxDistance;
        }
        
        /// <summary>
        ///Clones SetSonarModeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Messages.Proxy.SetSonarModeRequest target0 = new global::Arduino.Messages.Proxy.SetSonarModeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetSonarModeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._TriggerPin)));
            writer.Write(((int)(this._EchoPin)));
            writer.Write(this._MaxDistance);
        }
        
        /// <summary>
        ///Deserializes SetSonarModeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetSonarModeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TriggerPin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._EchoPin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._MaxDistance = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="SetPortDigitalValueRequest")]
    public class SetPortDigitalValueRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetPortDigitalValueRequest() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _Pin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins Pin {
            get {
                return this._Pin;
            }
            set {
                this._Pin = value;
            }
        }
        
        private global::Arduino.Firmata.Types.Proxy.PinDigitalValue _Value;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.PinDigitalValue Value {
            get {
                return this._Value;
            }
            set {
                this._Value = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetPortDigitalValueRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Messages.Proxy.SetPortDigitalValueRequest typedTarget = ((global::Arduino.Messages.Proxy.SetPortDigitalValueRequest)(target));
            typedTarget._Pin = this._Pin;
            typedTarget._Value = this._Value;
        }
        
        /// <summary>
        ///Clones SetPortDigitalValueRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Messages.Proxy.SetPortDigitalValueRequest target0 = new global::Arduino.Messages.Proxy.SetPortDigitalValueRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetPortDigitalValueRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Pin)));
            writer.Write(((int)(this._Value)));
        }
        
        /// <summary>
        ///Deserializes SetPortDigitalValueRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetPortDigitalValueRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._Value = ((global::Arduino.Firmata.Types.Proxy.PinDigitalValue)(reader.ReadInt32()));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="SetPortAnalogValueRequest")]
    public class SetPortAnalogValueRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetPortAnalogValueRequest() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _Pin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins Pin {
            get {
                return this._Pin;
            }
            set {
                this._Pin = value;
            }
        }
        
        private int _Value;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Value {
            get {
                return this._Value;
            }
            set {
                this._Value = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetPortAnalogValueRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Messages.Proxy.SetPortAnalogValueRequest typedTarget = ((global::Arduino.Messages.Proxy.SetPortAnalogValueRequest)(target));
            typedTarget._Pin = this._Pin;
            typedTarget._Value = this._Value;
        }
        
        /// <summary>
        ///Clones SetPortAnalogValueRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Messages.Proxy.SetPortAnalogValueRequest target0 = new global::Arduino.Messages.Proxy.SetPortAnalogValueRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetPortAnalogValueRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Pin)));
            writer.Write(this._Value);
        }
        
        /// <summary>
        ///Deserializes SetPortAnalogValueRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetPortAnalogValueRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._Value = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="SetPinReportingRequest")]
    public class SetPinReportingRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetPinReportingRequest() {
        }
        
        private global::Arduino.Firmata.Types.Proxy.Pins _Pin;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Arduino.Firmata.Types.Proxy.Pins Pin {
            get {
                return this._Pin;
            }
            set {
                this._Pin = value;
            }
        }
        
        private bool _ReportingEnabled;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool ReportingEnabled {
            get {
                return this._ReportingEnabled;
            }
            set {
                this._ReportingEnabled = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetPinReportingRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Arduino.Messages.Proxy.SetPinReportingRequest typedTarget = ((global::Arduino.Messages.Proxy.SetPinReportingRequest)(target));
            typedTarget._Pin = this._Pin;
            typedTarget._ReportingEnabled = this._ReportingEnabled;
        }
        
        /// <summary>
        ///Clones SetPinReportingRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Arduino.Messages.Proxy.SetPinReportingRequest target0 = new global::Arduino.Messages.Proxy.SetPinReportingRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetPinReportingRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Pin)));
            writer.Write(this._ReportingEnabled);
        }
        
        /// <summary>
        ///Deserializes SetPinReportingRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetPinReportingRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(reader.ReadInt32()));
            this._ReportingEnabled = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DigitalOutputUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public DigitalOutputUpdate() {
        }
        
        public DigitalOutputUpdate(global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest body) : 
                base(body) {
        }
        
        public DigitalOutputUpdate(global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AnalogOutputUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public AnalogOutputUpdate() {
        }
        
        public AnalogOutputUpdate(global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest body) : 
                base(body) {
        }
        
        public AnalogOutputUpdate(global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetPinMode : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Arduino.Messages.Proxy.SetPinModeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetPinMode() {
        }
        
        public SetPinMode(global::Arduino.Messages.Proxy.SetPinModeRequest body) : 
                base(body) {
        }
        
        public SetPinMode(global::Arduino.Messages.Proxy.SetPinModeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetServoMode : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Arduino.Messages.Proxy.SetServoModeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetServoMode() {
        }
        
        public SetServoMode(global::Arduino.Messages.Proxy.SetServoModeRequest body) : 
                base(body) {
        }
        
        public SetServoMode(global::Arduino.Messages.Proxy.SetServoModeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetSonarMode : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Arduino.Messages.Proxy.SetSonarModeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetSonarMode() {
        }
        
        public SetSonarMode(global::Arduino.Messages.Proxy.SetSonarModeRequest body) : 
                base(body) {
        }
        
        public SetSonarMode(global::Arduino.Messages.Proxy.SetSonarModeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetPortDigitalValue : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Arduino.Messages.Proxy.SetPortDigitalValueRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetPortDigitalValue() {
        }
        
        public SetPortDigitalValue(global::Arduino.Messages.Proxy.SetPortDigitalValueRequest body) : 
                base(body) {
        }
        
        public SetPortDigitalValue(global::Arduino.Messages.Proxy.SetPortDigitalValueRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetPortAnalogValue : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Arduino.Messages.Proxy.SetPortAnalogValueRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetPortAnalogValue() {
        }
        
        public SetPortAnalogValue(global::Arduino.Messages.Proxy.SetPortAnalogValueRequest body) : 
                base(body) {
        }
        
        public SetPortAnalogValue(global::Arduino.Messages.Proxy.SetPortAnalogValueRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetPinReporting : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Arduino.Messages.Proxy.SetPinReportingRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetPinReporting() {
        }
        
        public SetPinReporting(global::Arduino.Messages.Proxy.SetPinReportingRequest body) : 
                base(body) {
        }
        
        public SetPinReporting(global::Arduino.Messages.Proxy.SetPinReportingRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Contract {
        
        public const string Identifier = null;
    }
}
namespace Arduino.Firmata.Types.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="Pins")]
    public enum Pins : int {
        
        None = 0,
        
        D1 = 1,
        
        D2 = 2,
        
        D3 = 3,
        
        D4 = 4,
        
        D5 = 5,
        
        D6 = 6,
        
        D7 = 7,
        
        D8 = 8,
        
        D9 = 9,
        
        D10 = 10,
        
        D11 = 11,
        
        D12 = 12,
        
        D13 = 13,
        
        A0 = 14,
        
        A1 = 15,
        
        A2 = 16,
        
        A3 = 17,
        
        A4 = 18,
        
        A5 = 19,
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="PinMode")]
    public enum PinMode : int {
        
        None = -1,
        
        Input = 0,
        
        Output = 1,
        
        Analog = 2,
        
        PWM = 3,
        
        Servo = 4,
        
        Shift = 5,
        
        I2C = 6,
        
        Sonar = 7,
        
        IrReceiver = 8,
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute()]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace=null, ElementName="PinDigitalValue")]
    public enum PinDigitalValue : int {
        
        Low = 0,
        
        High = 1,
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Contract {
        
        public const string Identifier = null;
    }
}
