//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("Arduino")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("Arduino")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="Arduino.Y2012.M01, Version=1.0.0.0, Culture=neutral, PublicKeyToken=e3a6d1d8ea729" +
    "7f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformArduino {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Proxy.ArduinoState), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Proxy_ArduinoState_TO_Arduino_ArduinoState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.ArduinoState), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_ArduinoState_TO_Arduino_Proxy_ArduinoState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Proxy.PinConfigurationCollection), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Proxy_PinConfigurationCollection_TO_Arduino_PinConfigurationCollection));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.PinConfigurationCollection), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_PinConfigurationCollection_TO_Arduino_Proxy_PinConfigurationCollection));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Proxy.PinConfigurationAnalogOutput), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Proxy_PinConfigurationAnalogOutput_TO_Arduino_PinConfigurationAnalogOutput));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.PinConfigurationAnalogOutput), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_PinConfigurationAnalogOutput_TO_Arduino_Proxy_PinConfigurationAnalogOutput));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Proxy.PinConfigurationDigitalPort), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Proxy_PinConfigurationDigitalPort_TO_Arduino_PinConfigurationDigitalPort));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.PinConfigurationDigitalPort), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_PinConfigurationDigitalPort_TO_Arduino_Proxy_PinConfigurationDigitalPort));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_Proxy_DigitalOutputUpdateRequest_TO_Arduino_Messages_DigitalOutputUpdateRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.Messages.DigitalOutputUpdateRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_DigitalOutputUpdateRequest_TO_Arduino_Messages_Proxy_DigitalOutputUpdateRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_Proxy_AnalogOutputUpdateRequest_TO_Arduino_Messages_AnalogOutputUpdateRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.Messages.AnalogOutputUpdateRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_AnalogOutputUpdateRequest_TO_Arduino_Messages_Proxy_AnalogOutputUpdateRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Messages.Proxy.SetPinModeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_Proxy_SetPinModeRequest_TO_Arduino_Messages_SetPinModeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.Messages.SetPinModeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_SetPinModeRequest_TO_Arduino_Messages_Proxy_SetPinModeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Messages.Proxy.SetServoModeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_Proxy_SetServoModeRequest_TO_Arduino_Messages_SetServoModeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.Messages.SetServoModeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_SetServoModeRequest_TO_Arduino_Messages_Proxy_SetServoModeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Messages.Proxy.SetSonarModeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_Proxy_SetSonarModeRequest_TO_Arduino_Messages_SetSonarModeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.Messages.SetSonarModeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_SetSonarModeRequest_TO_Arduino_Messages_Proxy_SetSonarModeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Messages.Proxy.SetPortDigitalValueRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_Proxy_SetPortDigitalValueRequest_TO_Arduino_Messages_SetPortDigitalValueRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.Messages.SetPortDigitalValueRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_SetPortDigitalValueRequest_TO_Arduino_Messages_Proxy_SetPortDigitalValueRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Messages.Proxy.SetPortAnalogValueRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_Proxy_SetPortAnalogValueRequest_TO_Arduino_Messages_SetPortAnalogValueRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.Messages.SetPortAnalogValueRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_SetPortAnalogValueRequest_TO_Arduino_Messages_Proxy_SetPortAnalogValueRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Arduino.Messages.Proxy.SetPinReportingRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_Proxy_SetPinReportingRequest_TO_Arduino_Messages_SetPinReportingRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Arduino.Messages.SetPinReportingRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Arduino_Messages_SetPinReportingRequest_TO_Arduino_Messages_Proxy_SetPinReportingRequest));
        }
        
        public static object Arduino_Proxy_ArduinoState_TO_Arduino_ArduinoState(object transformFrom) {
            global::Arduino.ArduinoState target = new global::Arduino.ArduinoState();
            global::Arduino.Proxy.ArduinoState from = ((global::Arduino.Proxy.ArduinoState)(transformFrom));
            target.ConnectionType = ((global::Arduino.ArduinoState.ConnectionTypes)(((int)(from.ConnectionType))));
            target.ComPort = from.ComPort;
            target.ComPortRate = from.ComPortRate;
            if ((from.PinsConfiguration != null)) {
                target.PinsConfiguration = ((global::Arduino.PinConfigurationCollection)(Arduino_Proxy_PinConfigurationCollection_TO_Arduino_PinConfigurationCollection(from.PinsConfiguration)));
            }
            else {
                target.PinsConfiguration = null;
            }
            if ((from.PinsReporting != null)) {
                int count = from.PinsReporting.Count;
                global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Pins> tmp = new global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Pins>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Arduino.Firmata.Types.Pins tmp0 = default(global::Arduino.Firmata.Types.Pins);
                    tmp0 = ((global::Arduino.Firmata.Types.Pins)(((int)(from.PinsReporting[index]))));
                    tmp.Add(tmp0);
                }
                target.PinsReporting = tmp;
            }
            else {
                target.PinsReporting = null;
            }
            target.SamplingInterval = from.SamplingInterval;
            return target;
        }
        
        public static object Arduino_ArduinoState_TO_Arduino_Proxy_ArduinoState(object transformFrom) {
            global::Arduino.Proxy.ArduinoState target = new global::Arduino.Proxy.ArduinoState();
            global::Arduino.ArduinoState from = ((global::Arduino.ArduinoState)(transformFrom));
            target.ConnectionType = ((global::Arduino.Proxy.ArduinoState.ConnectionTypes)(((int)(from.ConnectionType))));
            target.ComPort = from.ComPort;
            target.ComPortRate = from.ComPortRate;
            global::Arduino.PinConfigurationCollection tmp = from.PinsConfiguration;
            if ((tmp != null)) {
                target.PinsConfiguration = ((global::Arduino.Proxy.PinConfigurationCollection)(Arduino_PinConfigurationCollection_TO_Arduino_Proxy_PinConfigurationCollection(tmp)));
            }
            global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Pins> tmp0 = from.PinsReporting;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Proxy.Pins> tmp1 = new global::System.Collections.Generic.List<global::Arduino.Firmata.Types.Proxy.Pins>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Arduino.Firmata.Types.Proxy.Pins tmp2 = default(global::Arduino.Firmata.Types.Proxy.Pins);
                    tmp2 = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(tmp0[index]))));
                    tmp1.Add(tmp2);
                }
                target.PinsReporting = tmp1;
            }
            target.SamplingInterval = from.SamplingInterval;
            return target;
        }
        
        public static object Arduino_Proxy_PinConfigurationCollection_TO_Arduino_PinConfigurationCollection(object transformFrom) {
            global::Arduino.PinConfigurationCollection target = new global::Arduino.PinConfigurationCollection();
            global::Arduino.Proxy.PinConfigurationCollection from = ((global::Arduino.Proxy.PinConfigurationCollection)(transformFrom));
            if ((from.Analog != null)) {
                int count = from.Analog.Length;
                global::Arduino.PinConfigurationAnalogOutput[] tmp = new global::Arduino.PinConfigurationAnalogOutput[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Arduino.PinConfigurationAnalogOutput tmp0 = default(global::Arduino.PinConfigurationAnalogOutput);
                    if ((from.Analog[index] != null)) {
                        tmp0 = ((global::Arduino.PinConfigurationAnalogOutput)(Arduino_Proxy_PinConfigurationAnalogOutput_TO_Arduino_PinConfigurationAnalogOutput(from.Analog[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp[index] = tmp0;
                }
                target.Analog = tmp;
            }
            else {
                target.Analog = null;
            }
            if ((from.Digital != null)) {
                int count0 = from.Digital.Length;
                global::Arduino.PinConfigurationDigitalPort[] tmp1 = new global::Arduino.PinConfigurationDigitalPort[count0];
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Arduino.PinConfigurationDigitalPort tmp2 = default(global::Arduino.PinConfigurationDigitalPort);
                    if ((from.Digital[index0] != null)) {
                        tmp2 = ((global::Arduino.PinConfigurationDigitalPort)(Arduino_Proxy_PinConfigurationDigitalPort_TO_Arduino_PinConfigurationDigitalPort(from.Digital[index0])));
                    }
                    else {
                        tmp2 = null;
                    }
                    tmp1[index0] = tmp2;
                }
                target.Digital = tmp1;
            }
            else {
                target.Digital = null;
            }
            return target;
        }
        
        public static object Arduino_PinConfigurationCollection_TO_Arduino_Proxy_PinConfigurationCollection(object transformFrom) {
            global::Arduino.Proxy.PinConfigurationCollection target = new global::Arduino.Proxy.PinConfigurationCollection();
            global::Arduino.PinConfigurationCollection from = ((global::Arduino.PinConfigurationCollection)(transformFrom));
            Arduino.PinConfigurationAnalogOutput[] tmp = from.Analog;
            if ((tmp != null)) {
                int count = tmp.Length;
                global::Arduino.Proxy.PinConfigurationAnalogOutput[] tmp0 = new global::Arduino.Proxy.PinConfigurationAnalogOutput[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Arduino.Proxy.PinConfigurationAnalogOutput tmp1 = default(global::Arduino.Proxy.PinConfigurationAnalogOutput);
                    global::Arduino.PinConfigurationAnalogOutput tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Arduino.Proxy.PinConfigurationAnalogOutput)(Arduino_PinConfigurationAnalogOutput_TO_Arduino_Proxy_PinConfigurationAnalogOutput(tmp2)));
                    }
                    tmp0[index] = tmp1;
                }
                target.Analog = tmp0;
            }
            Arduino.PinConfigurationDigitalPort[] tmp3 = from.Digital;
            if ((tmp3 != null)) {
                int count0 = tmp3.Length;
                global::Arduino.Proxy.PinConfigurationDigitalPort[] tmp4 = new global::Arduino.Proxy.PinConfigurationDigitalPort[count0];
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Arduino.Proxy.PinConfigurationDigitalPort tmp5 = default(global::Arduino.Proxy.PinConfigurationDigitalPort);
                    global::Arduino.PinConfigurationDigitalPort tmp6 = tmp3[index0];
                    if ((tmp6 != null)) {
                        tmp5 = ((global::Arduino.Proxy.PinConfigurationDigitalPort)(Arduino_PinConfigurationDigitalPort_TO_Arduino_Proxy_PinConfigurationDigitalPort(tmp6)));
                    }
                    tmp4[index0] = tmp5;
                }
                target.Digital = tmp4;
            }
            return target;
        }
        
        public static object Arduino_Proxy_PinConfigurationAnalogOutput_TO_Arduino_PinConfigurationAnalogOutput(object transformFrom) {
            global::Arduino.PinConfigurationAnalogOutput target = new global::Arduino.PinConfigurationAnalogOutput();
            global::Arduino.Proxy.PinConfigurationAnalogOutput from = ((global::Arduino.Proxy.PinConfigurationAnalogOutput)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.Pin))));
            return target;
        }
        
        public static object Arduino_PinConfigurationAnalogOutput_TO_Arduino_Proxy_PinConfigurationAnalogOutput(object transformFrom) {
            global::Arduino.Proxy.PinConfigurationAnalogOutput target = new global::Arduino.Proxy.PinConfigurationAnalogOutput();
            global::Arduino.PinConfigurationAnalogOutput from = ((global::Arduino.PinConfigurationAnalogOutput)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.Pin))));
            return target;
        }
        
        public static object Arduino_Proxy_PinConfigurationDigitalPort_TO_Arduino_PinConfigurationDigitalPort(object transformFrom) {
            global::Arduino.PinConfigurationDigitalPort target = new global::Arduino.PinConfigurationDigitalPort();
            global::Arduino.Proxy.PinConfigurationDigitalPort from = ((global::Arduino.Proxy.PinConfigurationDigitalPort)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.Pin))));
            target.Mode = ((global::Arduino.Firmata.Types.PinMode)(((int)(from.Mode))));
            target.OUTPUTInitialValue = ((global::Arduino.Firmata.Types.PinDigitalValue)(((int)(from.OUTPUTInitialValue))));
            target.PWMInitialValue = from.PWMInitialValue;
            return target;
        }
        
        public static object Arduino_PinConfigurationDigitalPort_TO_Arduino_Proxy_PinConfigurationDigitalPort(object transformFrom) {
            global::Arduino.Proxy.PinConfigurationDigitalPort target = new global::Arduino.Proxy.PinConfigurationDigitalPort();
            global::Arduino.PinConfigurationDigitalPort from = ((global::Arduino.PinConfigurationDigitalPort)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.Pin))));
            target.Mode = ((global::Arduino.Firmata.Types.Proxy.PinMode)(((int)(from.Mode))));
            target.OUTPUTInitialValue = ((global::Arduino.Firmata.Types.Proxy.PinDigitalValue)(((int)(from.OUTPUTInitialValue))));
            target.PWMInitialValue = from.PWMInitialValue;
            return target;
        }
        
        public static object Arduino_Messages_Proxy_DigitalOutputUpdateRequest_TO_Arduino_Messages_DigitalOutputUpdateRequest(object transformFrom) {
            global::Arduino.Messages.DigitalOutputUpdateRequest target = new global::Arduino.Messages.DigitalOutputUpdateRequest();
            global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest from = ((global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest)(transformFrom));
            target.CurrentPin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.CurrentPin))));
            target.CurrentPinMode = ((global::Arduino.Firmata.Types.PinMode)(((int)(from.CurrentPinMode))));
            target.Value = from.Value;
            return target;
        }
        
        public static object Arduino_Messages_DigitalOutputUpdateRequest_TO_Arduino_Messages_Proxy_DigitalOutputUpdateRequest(object transformFrom) {
            global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest target = new global::Arduino.Messages.Proxy.DigitalOutputUpdateRequest();
            global::Arduino.Messages.DigitalOutputUpdateRequest from = ((global::Arduino.Messages.DigitalOutputUpdateRequest)(transformFrom));
            target.CurrentPin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.CurrentPin))));
            target.CurrentPinMode = ((global::Arduino.Firmata.Types.Proxy.PinMode)(((int)(from.CurrentPinMode))));
            target.Value = from.Value;
            return target;
        }
        
        public static object Arduino_Messages_Proxy_AnalogOutputUpdateRequest_TO_Arduino_Messages_AnalogOutputUpdateRequest(object transformFrom) {
            global::Arduino.Messages.AnalogOutputUpdateRequest target = new global::Arduino.Messages.AnalogOutputUpdateRequest();
            global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest from = ((global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest)(transformFrom));
            target.CurrentPin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.CurrentPin))));
            target.Value = from.Value;
            return target;
        }
        
        public static object Arduino_Messages_AnalogOutputUpdateRequest_TO_Arduino_Messages_Proxy_AnalogOutputUpdateRequest(object transformFrom) {
            global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest target = new global::Arduino.Messages.Proxy.AnalogOutputUpdateRequest();
            global::Arduino.Messages.AnalogOutputUpdateRequest from = ((global::Arduino.Messages.AnalogOutputUpdateRequest)(transformFrom));
            target.CurrentPin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.CurrentPin))));
            target.Value = from.Value;
            return target;
        }
        
        public static object Arduino_Messages_Proxy_SetPinModeRequest_TO_Arduino_Messages_SetPinModeRequest(object transformFrom) {
            global::Arduino.Messages.SetPinModeRequest target = new global::Arduino.Messages.SetPinModeRequest();
            global::Arduino.Messages.Proxy.SetPinModeRequest from = ((global::Arduino.Messages.Proxy.SetPinModeRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.Pin))));
            target.Mode = ((global::Arduino.Firmata.Types.PinMode)(((int)(from.Mode))));
            return target;
        }
        
        public static object Arduino_Messages_SetPinModeRequest_TO_Arduino_Messages_Proxy_SetPinModeRequest(object transformFrom) {
            global::Arduino.Messages.Proxy.SetPinModeRequest target = new global::Arduino.Messages.Proxy.SetPinModeRequest();
            global::Arduino.Messages.SetPinModeRequest from = ((global::Arduino.Messages.SetPinModeRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.Pin))));
            target.Mode = ((global::Arduino.Firmata.Types.Proxy.PinMode)(((int)(from.Mode))));
            return target;
        }
        
        public static object Arduino_Messages_Proxy_SetServoModeRequest_TO_Arduino_Messages_SetServoModeRequest(object transformFrom) {
            global::Arduino.Messages.SetServoModeRequest target = new global::Arduino.Messages.SetServoModeRequest();
            global::Arduino.Messages.Proxy.SetServoModeRequest from = ((global::Arduino.Messages.Proxy.SetServoModeRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.Pin))));
            target.MinPulse = from.MinPulse;
            target.MaxPulse = from.MaxPulse;
            target.StartAngle = from.StartAngle;
            return target;
        }
        
        public static object Arduino_Messages_SetServoModeRequest_TO_Arduino_Messages_Proxy_SetServoModeRequest(object transformFrom) {
            global::Arduino.Messages.Proxy.SetServoModeRequest target = new global::Arduino.Messages.Proxy.SetServoModeRequest();
            global::Arduino.Messages.SetServoModeRequest from = ((global::Arduino.Messages.SetServoModeRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.Pin))));
            target.MinPulse = from.MinPulse;
            target.MaxPulse = from.MaxPulse;
            target.StartAngle = from.StartAngle;
            return target;
        }
        
        public static object Arduino_Messages_Proxy_SetSonarModeRequest_TO_Arduino_Messages_SetSonarModeRequest(object transformFrom) {
            global::Arduino.Messages.SetSonarModeRequest target = new global::Arduino.Messages.SetSonarModeRequest();
            global::Arduino.Messages.Proxy.SetSonarModeRequest from = ((global::Arduino.Messages.Proxy.SetSonarModeRequest)(transformFrom));
            target.TriggerPin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.TriggerPin))));
            target.EchoPin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.EchoPin))));
            target.MaxDistance = from.MaxDistance;
            return target;
        }
        
        public static object Arduino_Messages_SetSonarModeRequest_TO_Arduino_Messages_Proxy_SetSonarModeRequest(object transformFrom) {
            global::Arduino.Messages.Proxy.SetSonarModeRequest target = new global::Arduino.Messages.Proxy.SetSonarModeRequest();
            global::Arduino.Messages.SetSonarModeRequest from = ((global::Arduino.Messages.SetSonarModeRequest)(transformFrom));
            target.TriggerPin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.TriggerPin))));
            target.EchoPin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.EchoPin))));
            target.MaxDistance = from.MaxDistance;
            return target;
        }
        
        public static object Arduino_Messages_Proxy_SetPortDigitalValueRequest_TO_Arduino_Messages_SetPortDigitalValueRequest(object transformFrom) {
            global::Arduino.Messages.SetPortDigitalValueRequest target = new global::Arduino.Messages.SetPortDigitalValueRequest();
            global::Arduino.Messages.Proxy.SetPortDigitalValueRequest from = ((global::Arduino.Messages.Proxy.SetPortDigitalValueRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.Pin))));
            target.Value = ((global::Arduino.Firmata.Types.PinDigitalValue)(((int)(from.Value))));
            return target;
        }
        
        public static object Arduino_Messages_SetPortDigitalValueRequest_TO_Arduino_Messages_Proxy_SetPortDigitalValueRequest(object transformFrom) {
            global::Arduino.Messages.Proxy.SetPortDigitalValueRequest target = new global::Arduino.Messages.Proxy.SetPortDigitalValueRequest();
            global::Arduino.Messages.SetPortDigitalValueRequest from = ((global::Arduino.Messages.SetPortDigitalValueRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.Pin))));
            target.Value = ((global::Arduino.Firmata.Types.Proxy.PinDigitalValue)(((int)(from.Value))));
            return target;
        }
        
        public static object Arduino_Messages_Proxy_SetPortAnalogValueRequest_TO_Arduino_Messages_SetPortAnalogValueRequest(object transformFrom) {
            global::Arduino.Messages.SetPortAnalogValueRequest target = new global::Arduino.Messages.SetPortAnalogValueRequest();
            global::Arduino.Messages.Proxy.SetPortAnalogValueRequest from = ((global::Arduino.Messages.Proxy.SetPortAnalogValueRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.Pin))));
            target.Value = from.Value;
            return target;
        }
        
        public static object Arduino_Messages_SetPortAnalogValueRequest_TO_Arduino_Messages_Proxy_SetPortAnalogValueRequest(object transformFrom) {
            global::Arduino.Messages.Proxy.SetPortAnalogValueRequest target = new global::Arduino.Messages.Proxy.SetPortAnalogValueRequest();
            global::Arduino.Messages.SetPortAnalogValueRequest from = ((global::Arduino.Messages.SetPortAnalogValueRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.Pin))));
            target.Value = from.Value;
            return target;
        }
        
        public static object Arduino_Messages_Proxy_SetPinReportingRequest_TO_Arduino_Messages_SetPinReportingRequest(object transformFrom) {
            global::Arduino.Messages.SetPinReportingRequest target = new global::Arduino.Messages.SetPinReportingRequest();
            global::Arduino.Messages.Proxy.SetPinReportingRequest from = ((global::Arduino.Messages.Proxy.SetPinReportingRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Pins)(((int)(from.Pin))));
            target.ReportingEnabled = from.ReportingEnabled;
            return target;
        }
        
        public static object Arduino_Messages_SetPinReportingRequest_TO_Arduino_Messages_Proxy_SetPinReportingRequest(object transformFrom) {
            global::Arduino.Messages.Proxy.SetPinReportingRequest target = new global::Arduino.Messages.Proxy.SetPinReportingRequest();
            global::Arduino.Messages.SetPinReportingRequest from = ((global::Arduino.Messages.SetPinReportingRequest)(transformFrom));
            target.Pin = ((global::Arduino.Firmata.Types.Proxy.Pins)(((int)(from.Pin))));
            target.ReportingEnabled = from.ReportingEnabled;
            return target;
        }
    }
}
