//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("Wanderer")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("Wanderer")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="POFerro.Robotics.Wanderer.Y2013.M02, Version=1.0.0.0, Culture=neutral, PublicKeyT" +
    "oken=e3a6d1d8ea7297f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformPOFerro {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::POFerro.Robotics.Wanderer.Proxy.WandererState), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_Wanderer_Proxy_WandererState_TO_POFerro_Robotics_Wanderer_WandererState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::POFerro.Robotics.Wanderer.WandererState), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_Wanderer_WandererState_TO_POFerro_Robotics_Wanderer_Proxy_WandererState));
        }
        
        public static object POFerro_Robotics_Wanderer_Proxy_WandererState_TO_POFerro_Robotics_Wanderer_WandererState(object transformFrom) {
            global::POFerro.Robotics.Wanderer.WandererState target = new global::POFerro.Robotics.Wanderer.WandererState();
            global::POFerro.Robotics.Wanderer.Proxy.WandererState from = ((global::POFerro.Robotics.Wanderer.Proxy.WandererState)(transformFrom));
            target.IRSafeDistance = from.IRSafeDistance;
            target.IRDistanceDiferenceToAdjust = from.IRDistanceDiferenceToAdjust;
            target.CurrentState = ((global::POFerro.Robotics.Wanderer.WandererLogicalState)(((int)(from.CurrentState))));
            if ((from.LastLeftIRReading != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.LastLeftIRReading)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.LastLeftIRReading = tmp;
            }
            else {
                target.LastLeftIRReading = null;
            }
            if ((from.LastRightIRReading != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp0 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.LastRightIRReading)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.LastRightIRReading = tmp0;
            }
            else {
                target.LastRightIRReading = null;
            }
            if ((from.LastSonarReading != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp1 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.LastSonarReading)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                target.LastSonarReading = tmp1;
            }
            else {
                target.LastSonarReading = null;
            }
            if ((from.LastTurretReading != null)) {
                global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState tmp2 = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.LastTurretReading)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                target.LastTurretReading = tmp2;
            }
            else {
                target.LastTurretReading = null;
            }
            target.BestAngle = from.BestAngle;
            target.LeftWheelPower = from.LeftWheelPower;
            target.RightWheelPower = from.RightWheelPower;
            return target;
        }
        
        public static object POFerro_Robotics_Wanderer_WandererState_TO_POFerro_Robotics_Wanderer_Proxy_WandererState(object transformFrom) {
            global::POFerro.Robotics.Wanderer.Proxy.WandererState target = new global::POFerro.Robotics.Wanderer.Proxy.WandererState();
            global::POFerro.Robotics.Wanderer.WandererState from = ((global::POFerro.Robotics.Wanderer.WandererState)(transformFrom));
            target.IRSafeDistance = from.IRSafeDistance;
            target.IRDistanceDiferenceToAdjust = from.IRDistanceDiferenceToAdjust;
            target.CurrentState = ((global::POFerro.Robotics.Wanderer.Proxy.WandererLogicalState)(((int)(from.CurrentState))));
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp = from.LastLeftIRReading;
            if ((tmp != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp0 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.LastLeftIRReading = tmp0;
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp1 = from.LastRightIRReading;
            if ((tmp1 != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp2 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp1)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                target.LastRightIRReading = tmp2;
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp3 = from.LastSonarReading;
            if ((tmp3 != null)) {
                global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState tmp4 = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp3)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                target.LastSonarReading = tmp4;
            }
            global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState tmp5 = from.LastTurretReading;
            if ((tmp5 != null)) {
                global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState tmp6 = new global::POFerro.Robotics.ArduinoSonarTurret.Proxy.ArduinoSonarTurretState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp5)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp6)));
                target.LastTurretReading = tmp6;
            }
            target.BestAngle = from.BestAngle;
            target.LeftWheelPower = from.LeftWheelPower;
            target.RightWheelPower = from.RightWheelPower;
            return target;
        }
    }
}
