//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("ArduinoGenericDrive")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("ArduinoGenericDrive")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="ArduinoGenericDrive.Y2013.M03, Version=1.0.0.0, Culture=neutral, PublicKeyToken=e" +
    "3a6d1d8ea7297f8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformArduinoGenericDrive {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::POFerro.Robotics.ArduinoGenericDrive.Proxy.ArduinoGenericDriveState), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_ArduinoGenericDrive_Proxy_ArduinoGenericDriveState_TO_POFerro_Robotics_ArduinoGenericDrive_ArduinoGenericDriveState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::POFerro.Robotics.ArduinoGenericDrive.ArduinoGenericDriveState), new global::Microsoft.Dss.Core.Attributes.Transform(POFerro_Robotics_ArduinoGenericDrive_ArduinoGenericDriveState_TO_POFerro_Robotics_ArduinoGenericDrive_Proxy_ArduinoGenericDriveState));
        }
        
        public static object POFerro_Robotics_ArduinoGenericDrive_Proxy_ArduinoGenericDriveState_TO_POFerro_Robotics_ArduinoGenericDrive_ArduinoGenericDriveState(object transformFrom) {
            global::POFerro.Robotics.ArduinoGenericDrive.ArduinoGenericDriveState target = new global::POFerro.Robotics.ArduinoGenericDrive.ArduinoGenericDriveState();
            global::POFerro.Robotics.ArduinoGenericDrive.Proxy.ArduinoGenericDriveState from = ((global::POFerro.Robotics.ArduinoGenericDrive.Proxy.ArduinoGenericDriveState)(transformFrom));
            target.MotorShieldType = ((global::POFerro.Robotics.ArduinoGenericDrive.MotorShieldTypeEnum)(((int)(from.MotorShieldType))));
            target.RightForwardPin = from.RightForwardPin;
            target.RightBackwardPin = from.RightBackwardPin;
            target.LeftForwardPin = from.LeftForwardPin;
            target.LeftBackwardPin = from.LeftBackwardPin;
            target.LeftEngineDirPin = from.LeftEngineDirPin;
            target.LeftEngineBreakPin = from.LeftEngineBreakPin;
            target.LeftEnginePWMPin = from.LeftEnginePWMPin;
            target.LeftEngineCurrentSensor = from.LeftEngineCurrentSensor;
            target.RightEngineDirPin = from.RightEngineDirPin;
            target.RightEngineBreakPin = from.RightEngineBreakPin;
            target.RightEnginePWMPin = from.RightEnginePWMPin;
            target.RightEngineCurrentSensor = from.RightEngineCurrentSensor;
            target.MillisecondsPerAngle = from.MillisecondsPerAngle;
            target.TimeStamp = from.TimeStamp;
            if ((from.LeftWheel != null)) {
                global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState tmp = new global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.LeftWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.LeftWheel = tmp;
            }
            else {
                target.LeftWheel = null;
            }
            if ((from.RightWheel != null)) {
                global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState tmp0 = new global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.RightWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.RightWheel = tmp0;
            }
            else {
                target.RightWheel = null;
            }
            target.DistanceBetweenWheels = from.DistanceBetweenWheels;
            target.IsEnabled = from.IsEnabled;
            target.DriveDistanceStage = from.DriveDistanceStage;
            target.RotateDegreesStage = from.RotateDegreesStage;
            target.DriveState = from.DriveState;
            return target;
        }
        
        public static object POFerro_Robotics_ArduinoGenericDrive_ArduinoGenericDriveState_TO_POFerro_Robotics_ArduinoGenericDrive_Proxy_ArduinoGenericDriveState(object transformFrom) {
            global::POFerro.Robotics.ArduinoGenericDrive.Proxy.ArduinoGenericDriveState target = new global::POFerro.Robotics.ArduinoGenericDrive.Proxy.ArduinoGenericDriveState();
            global::POFerro.Robotics.ArduinoGenericDrive.ArduinoGenericDriveState from = ((global::POFerro.Robotics.ArduinoGenericDrive.ArduinoGenericDriveState)(transformFrom));
            target.MotorShieldType = ((global::POFerro.Robotics.ArduinoGenericDrive.Proxy.MotorShieldTypeEnum)(((int)(from.MotorShieldType))));
            target.RightForwardPin = from.RightForwardPin;
            target.RightBackwardPin = from.RightBackwardPin;
            target.LeftForwardPin = from.LeftForwardPin;
            target.LeftBackwardPin = from.LeftBackwardPin;
            target.LeftEngineDirPin = from.LeftEngineDirPin;
            target.LeftEngineBreakPin = from.LeftEngineBreakPin;
            target.LeftEnginePWMPin = from.LeftEnginePWMPin;
            target.LeftEngineCurrentSensor = from.LeftEngineCurrentSensor;
            target.RightEngineDirPin = from.RightEngineDirPin;
            target.RightEngineBreakPin = from.RightEngineBreakPin;
            target.RightEnginePWMPin = from.RightEnginePWMPin;
            target.RightEngineCurrentSensor = from.RightEngineCurrentSensor;
            target.MillisecondsPerAngle = from.MillisecondsPerAngle;
            target.TimeStamp = from.TimeStamp;
            global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState tmp = from.LeftWheel;
            if ((tmp != null)) {
                global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState tmp0 = new global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.LeftWheel = tmp0;
            }
            global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState tmp1 = from.RightWheel;
            if ((tmp1 != null)) {
                global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState tmp2 = new global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp1)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                target.RightWheel = tmp2;
            }
            target.DistanceBetweenWheels = from.DistanceBetweenWheels;
            target.IsEnabled = from.IsEnabled;
            target.DriveDistanceStage = from.DriveDistanceStage;
            target.RotateDegreesStage = from.RotateDegreesStage;
            target.DriveState = from.DriveState;
            return target;
        }
    }
}
